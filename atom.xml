<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello World</title>
  <subtitle>Hello Young</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-23T03:39:12.582Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hello Young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 学习指南_学习Java：类型注解以及可插拔类型系统</title>
    <link href="http://yoursite.com/2018/03/23/java-tutorial-learning_annotation_type&amp;pluggable/"/>
    <id>http://yoursite.com/2018/03/23/java-tutorial-learning_annotation_type&amp;pluggable/</id>
    <published>2018-03-23T04:26:59.000Z</published>
    <updated>2018-03-23T03:39:12.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型注解以及可插拔的类型系统"><a href="#类型注解以及可插拔的类型系统" class="headerlink" title="类型注解以及可插拔的类型系统"></a>类型注解以及可插拔的类型系统</h1><p>Java SE 8版本之前，注解只能被应用于声明或定义。Java 8中，注解可以应用于任何<em>type use</em>使用类行的地方。例如，类型实例创建表达式 (<code>new</code>),类型转换 casts,实现引用 <code>implements</code>,以及抛出异常 <code>throws</code> 引用.这种格式的注解叫做类型注解 <em>type annotation</em>。注解基础 <a href="https://docs.oracle.com/javase/tutorial/java/annotations/basics.html" target="_blank" rel="external">Annotations Basics</a>里提供了几个相关的例子.</p>
<p>类型注解的创建，支持提高确保java程序更强的类型检查的分析方法。Java 8 并没有提供类型检查框架。但是它允许你写或者下载一个类型检查框架，实现一个或者多个可插拔的模块，来与Java编译器结合使用。</p>
<p>例如，你想要确保你程序中一个特定的变量不允许为null；你想要避免触发 <code>NullPointerException</code>. 你可以写一个自定义的插件检查这个规则.你现在需要修改你的代码并给对应的变量添加注解,表明其不允许被赋值为null。变量的定义可能如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NonNull</span> String str;</div></pre></td></tr></table></figure>
<p>当你编译代码时，包含 <code>NonNull</code> 模块。编译器侦测出潜在的问题就会大衣橱一个警告，告知你修改代码以避免错误。当你修改代码移除所有的警告之后，这个特定的错误在程序运行时将不会发生.</p>
<p>你也可以使用多个类型检查模块，每个模块检查不同类型的错误。这样，你就可以在Java类型系统之上，添加任何你想要的特定的检查。</p>
<p>由合理的类型注解使用以及插件式类型检查的存在，你可以写出更加健壮的代码，更加不易出错。</p>
<p>很多种情况下，你不需要自己实现类型检查模块。已有第三方为你实现了这些工作。例如，你可能会因为华盛顿 University of Washington大学创建的检查框架而受益.这个框架包含了 <code>NonNull</code>模块，一个正则表达式 regular expression 模块, 以及一个互斥锁 mutex lock 模块.参考 <a href="http://types.cs.washington.edu/checker-framework/" target="_blank" rel="external">Checker Framework</a>获取更多信息.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类型注解以及可插拔的类型系统&quot;&gt;&lt;a href=&quot;#类型注解以及可插拔的类型系统&quot; class=&quot;headerlink&quot; title=&quot;类型注解以及可插拔的类型系统&quot;&gt;&lt;/a&gt;类型注解以及可插拔的类型系统&lt;/h1&gt;&lt;p&gt;Java SE 8版本之前，注解只能被应用于
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="annotation" scheme="http://yoursite.com/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：预定义的注解类型</title>
    <link href="http://yoursite.com/2018/03/23/java-tutorial-learning_annotation_predefined%20copy/"/>
    <id>http://yoursite.com/2018/03/23/java-tutorial-learning_annotation_predefined copy/</id>
    <published>2018-03-23T03:26:59.000Z</published>
    <updated>2018-03-23T03:02:47.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="预定义的注解类型"><a href="#预定义的注解类型" class="headerlink" title="预定义的注解类型"></a>预定义的注解类型</h1><p>Java SE API 预定义了一系列的注解类型。一些是被Java编译器使用，另外一是应用于其他注解(注解的注解).</p>
<h2 id="Java语言使用的注解"><a href="#Java语言使用的注解" class="headerlink" title="Java语言使用的注解"></a>Java语言使用的注解</h2><p><code>java.lang</code> 包中所定义的注解类型有 <code>@Deprecated</code>, <code>@Override</code>, 以及 <code>@SuppressWarnings</code>.</p>
<p><strong>@Deprecated</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Deprecated.html" target="_blank" rel="external"><code>@Deprecated</code></a> 注解表明了标注的元素是不推荐的并且不应该再继续使用。无论什么时候程序使用了有该标记的类，方法，字段，编译器都会产生一个警告。如果元素标记了<code>@Deprecated</code>那么他的主时钟也必须是用Java文档 <code>@deprecated</code> 标签，正如下面的例子。在Java文档注释中使用符号<code>@</code>与注解中一样并不是巧合的coincidental：他们是关联的概念。不过，要注意，Java文档注释里的标签首字母为小写<code>d</code>注解中首字母为<code>D</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// Javadoc comment follows</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@deprecated</span></div><div class="line">     * explanation of why it was deprecated</div><div class="line">     */</div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deprecatedMethod</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>@Override</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Override.html" target="_blank" rel="external"><code>@Override</code></a>  注解告知编译器元素是为了复写在父类中定义的元素。复写方法将会在<a href="https://docs.oracle.com/javase/tutorial/java/IandI/index.html" target="_blank" rel="external">接口与继承Interfaces and Inheritance</a>一篇中讨论到.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mark method as a superclass method</span></div><div class="line"><span class="comment">// that has been overridden</span></div><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">overriddenMethod</span><span class="params">()</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>
<p>当复写方法的时候并不是必须要使用这个注解，他可以帮助你预防错误。如果标记了<code>@Override</code>标记的方法没有正确的复写他父类中的一个方法，编译器就会产生错误。</p>
<p><strong>@SuppressWarnings</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/SuppressWarnings.html" target="_blank" rel="external"><code>@SuppressWarnings</code></a> 注解告诉编译器，阻止可能产生的特定的警告。下面的例子中，使用了一个不推荐的方法，编译器通常会生成一个警告。在这种情况下，使用这个注解就可以阻止产生警告.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// use a deprecated method and tell </span></div><div class="line"><span class="comment">// compiler not to generate a warning</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">useDeprecatedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="comment">// deprecation warning</span></div><div class="line">     <span class="comment">// - suppressed</span></div><div class="line">     objectOne.deprecatedMethod();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>每一个编译器警告属于一个分类。Java语言明确列出了两类警告： <code>deprecation</code> 以及 <code>unchecked</code>. </p>
<p> <code>unchecked</code>警告，当遇到泛型 <a href="https://docs.oracle.com/javase/tutorial/java/generics/index.html" target="_blank" rel="external">generics</a>出现之前的遗留代码时可能会出现。 如果要阻止多个类型的警告，参考以下语法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;deprecation&quot;&#125;)</div></pre></td></tr></table></figure>
<p><strong>@SafeVarargs</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/SafeVarargs.html" target="_blank" rel="external"><code>@SafeVarargs</code></a> 注解，当使用在一个构造器或者方法时，断定该方法在使用可变参数时没有潜在的不安全因素。使用了该注解，与 <code>varargs</code>可变参数使用相关的未检查警告可以被阻止。</p>
<p><strong>@FunctionalInterface</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html" target="_blank" rel="external"><code>@FunctionalInterface</code></a> 功能接口注解，在Java SE8中引入。表明是一个功能接口，与Java语言标准中定义的功能接口一样.</p>
<h2 id="用于其他注解的注解"><a href="#用于其他注解的注解" class="headerlink" title="用于其他注解的注解"></a>用于其他注解的注解</h2><p>用于其注解的注解叫做元注解<em>meta-annotations</em>. <code>java.lang.annotation</code>中定义了数个元注解.</p>
<p><strong>@Retention</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Retention.html" target="_blank" rel="external"><code>@Retention</code></a> 保留注解表明了注解是如何被存储的:</p>
<ul>
<li><code>RetentionPolicy.SOURCE</code> – 该标记表明注解只在资源层面被保留，编译器会忽略.</li>
<li><code>RetentionPolicy.CLASS</code> – 该标记表明注解在编译时被保留，JVM会忽略.</li>
<li><code>RetentionPolicy.RUNTIME</code> – 该标记表明注解会被JVM保留，可以再运行时使用.</li>
</ul>
<p><strong>@Documented</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Documented.html" target="_blank" rel="external"><code>@Documented</code></a> 文档注解，表明使用了对应注解的元素，会被Java文档工具Javadoc tool使用。(默认情况下，注解不会被包含在Java文档中)。参考Java文档工具页面 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/index.html" target="_blank" rel="external">Javadoc tools page</a>，获取更多相关信息.</p>
<p><strong>@Target</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Target.html" target="_blank" rel="external"><code>@Target</code></a> 注解，限制了限制了注解可以应用于那种Java元素类型。目标注解可以使用如下的元素类型作为它的值:</p>
<ul>
<li><code>ElementType.ANNOTATION_TYPE</code> 可以应用于注解类型.</li>
<li><code>ElementType.CONSTRUCTOR</code> 可以应用于构造器.</li>
<li><code>ElementType.FIELD</code> 可以应用于字段或者属性（字段、枚举的常量）.</li>
<li><code>ElementType.LOCAL_VARIABLE</code> 可以应用于局部变量.</li>
<li><code>ElementType.METHOD</code> 可以应用于方法级别的注解.</li>
<li><code>ElementType.PACKAGE</code> 可以应用于包的定义.</li>
<li><code>ElementType.PARAMETER</code> 可以应用于方法的参数。</li>
<li>ElementType.TYPE 可以应用于任何的类（接口、类、枚举、注解）。</li>
</ul>
<p><strong>@Inherited</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Inherited.html" target="_blank" rel="external"><code>@Inherited</code></a> 继承注解表明，注解类型可以用从器的父类继承。(默认是不可以继承的)，当用户查询类的注解类型而类本身没有该注解时，就会查询其父类是否有该注解。这个注解只能使用与类的定义.</p>
<p><strong>@Repeatable</strong> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Repeatable.html" target="_blank" rel="external"><code>@Repeatable</code></a> 可重复的注解，在Java SE 8中引入，表明该注解在同一个声明或者类型处可以使用不止一次。参考可重复注解 <a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="external">Repeating Annotations</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;预定义的注解类型&quot;&gt;&lt;a href=&quot;#预定义的注解类型&quot; class=&quot;headerlink&quot; title=&quot;预定义的注解类型&quot;&gt;&lt;/a&gt;预定义的注解类型&lt;/h1&gt;&lt;p&gt;Java SE API 预定义了一系列的注解类型。一些是被Java编译器使用，另外一是应用于
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="annotation" scheme="http://yoursite.com/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-枚举类问题与练习</title>
    <link href="http://yoursite.com/2018/03/21/java-tutorial-learning_class&amp;object_enum_q&amp;e/"/>
    <id>http://yoursite.com/2018/03/21/java-tutorial-learning_class&amp;object_enum_q&amp;e/</id>
    <published>2018-03-21T10:51:59.000Z</published>
    <updated>2018-03-21T09:01:43.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举类问题与练习"><a href="#枚举类问题与练习" class="headerlink" title="枚举类问题与练习"></a>枚举类问题与练习</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>问题: True or false: 枚举类可以是 java.lang.String类的子类.</li>
</ol>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li>练习: 重写 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/creating-questions.html" target="_blank" rel="external">Questions and Exercises: Classes</a> 中 <code>Card</code> 类，使用枚举类来表示扑克中的花色和点数。</li>
<li>练习: 重写 <code>Deck</code> 类.</li>
</ol>
<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><a id="more"></a>
<h2 id="问题答案"><a href="#问题答案" class="headerlink" title="问题答案"></a>问题答案</h2><ol>
<li><p>问题: True or false: 枚举类可以是 java.lang.String类的子类.</p>
<p>答案: False. 所有的枚举类都继承自 <code>java.lang.Enum</code>.因为一个类只能继承字一个父类，Java语言不支持多重继承，因此枚举类不可能是任何其他类的子类.</p>
</li>
</ol>
<h2 id="练习答案"><a href="#练习答案" class="headerlink" title="练习答案"></a>练习答案</h2><ol>
<li><p>练习: 重写 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/creating-questions.html" target="_blank" rel="external">Questions and Exercises: Classes</a> 中 <code>Card</code> 类，使用枚举类来表示扑克中的花色和点数。</p>
<p>答案: 参考 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/Card3.java" target="_blank" rel="external"><code>Card3.java</code></a>, <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/Suit.java" target="_blank" rel="external"><code>Suit.java</code></a>, 和 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/Rank.java" target="_blank" rel="external"><code>Rank.java</code></a>.</p>
</li>
<li><p>练习: 重写 <code>Deck</code> 类.</p>
<p>答案: 参考 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/Deck3.java" target="_blank" rel="external"><code>Deck3.java</code></a>.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;枚举类问题与练习&quot;&gt;&lt;a href=&quot;#枚举类问题与练习&quot; class=&quot;headerlink&quot; title=&quot;枚举类问题与练习&quot;&gt;&lt;/a&gt;枚举类问题与练习&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;问题: True or false: 枚举类可以是 java.lang.String类的子类.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;练习: 重写 &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/creating-questions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Questions and Exercises: Classes&lt;/a&gt; 中 &lt;code&gt;Card&lt;/code&gt; 类，使用枚举类来表示扑克中的花色和点数。&lt;/li&gt;
&lt;li&gt;练习: 重写 &lt;code&gt;Deck&lt;/code&gt; 类.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h1&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="enum" scheme="http://yoursite.com/tags/enum/"/>
    
      <category term="枚举类" scheme="http://yoursite.com/tags/%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：定义一个注解类型</title>
    <link href="http://yoursite.com/2018/03/21/java-tutorial-learning_annotation_declaring/"/>
    <id>http://yoursite.com/2018/03/21/java-tutorial-learning_annotation_declaring/</id>
    <published>2018-03-21T10:21:59.000Z</published>
    <updated>2018-03-21T10:22:06.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义一个注解类型"><a href="#定义一个注解类型" class="headerlink" title="定义一个注解类型"></a>定义一个注解类型</h1><p>许多注解代替代码中的注释。</p>
<p>假设一个软件组通常在类体的起始处填写注释已提供重要的信息:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generation3List</span> <span class="keyword">extends</span> <span class="title">Generation2List</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">// Author: John Doe</span></div><div class="line">   <span class="comment">// Date: 3/17/2002</span></div><div class="line">   <span class="comment">// Current revision: 6</span></div><div class="line">   <span class="comment">// Last modified: 4/12/2004</span></div><div class="line">   <span class="comment">// By: Jane Doe</span></div><div class="line">   <span class="comment">// Reviewers: Alice, Bill, Cindy</span></div><div class="line"></div><div class="line">   <span class="comment">// class code goes here</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了使用注解添加这些元数据，你必须先定义一个注解类型 <em>annotation type</em>. 其语法如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@interface</span> ClassPreamble &#123;</div><div class="line">   <span class="function">String <span class="title">author</span><span class="params">()</span></span>;</div><div class="line">   <span class="function">String <span class="title">date</span><span class="params">()</span></span>;</div><div class="line">   <span class="function"><span class="keyword">int</span> <span class="title">currentRevision</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</div><div class="line">   <span class="function">String <span class="title">lastModified</span><span class="params">()</span> <span class="keyword">default</span> "N/A"</span>;</div><div class="line">   <span class="function">String <span class="title">lastModifiedBy</span><span class="params">()</span> <span class="keyword">default</span> "N/A"</span>;</div><div class="line">   <span class="comment">// Note use of array</span></div><div class="line">   String[] reviewers();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注解类型的定义看起来像是接口的定义，只不过关键字<code>interface</code>前面多了一个符号 (<code>@</code>) (@ = AT, 与注解的符号一样).</p>
<p>注解类型是接口 <em>interface</em>的一种格式后面的课程会讲到,现在你不需要理解接口。</p>
<p>上面的注解类型定义，类体中包含了注解类型元素 <em>annotation type element</em> 的定义,看起来像是方法，不过注意，他们可以定义默认值。</p>
<p>定义注解类型之后，你可以使用这个注解类型，并填入元素值，像下面这样:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ClassPreamble</span> (</div><div class="line">   author = <span class="string">"John Doe"</span>,</div><div class="line">   date = <span class="string">"3/17/2002"</span>,</div><div class="line">   currentRevision = <span class="number">6</span>,</div><div class="line">   lastModified = <span class="string">"4/12/2004"</span>,</div><div class="line">   lastModifiedBy = <span class="string">"Jane Doe"</span>,</div><div class="line">   <span class="comment">// Note array notation</span></div><div class="line">   reviewers = &#123;<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Cindy"</span>&#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generation3List</span> <span class="keyword">extends</span> <span class="title">Generation2List</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// class code goes here</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>注意:</strong> 为了是 <code>@ClassPreamble</code> 注解定义的元素出现在java文档生成器生成的文档中，你必须为 <code>@ClassPreamble</code> 注解的定义添加d <code>@Documented</code> 注解:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// import this to use @Documented</div><div class="line">import java.lang.annotation.*;</div><div class="line"></div><div class="line">@Documented</div><div class="line">@interface ClassPreamble &#123;</div><div class="line"></div><div class="line">   // Annotation element definitions</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义一个注解类型&quot;&gt;&lt;a href=&quot;#定义一个注解类型&quot; class=&quot;headerlink&quot; title=&quot;定义一个注解类型&quot;&gt;&lt;/a&gt;定义一个注解类型&lt;/h1&gt;&lt;p&gt;许多注解代替代码中的注释。&lt;/p&gt;
&lt;p&gt;假设一个软件组通常在类体的起始处填写注释已提供重要
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="annotation" scheme="http://yoursite.com/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：注解</title>
    <link href="http://yoursite.com/2018/03/21/java-tutorial-learning_annotation/"/>
    <id>http://yoursite.com/2018/03/21/java-tutorial-learning_annotation/</id>
    <published>2018-03-21T09:26:59.000Z</published>
    <updated>2018-03-21T09:27:12.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课程-注解"><a href="#课程-注解" class="headerlink" title="课程: 注解"></a>课程: 注解</h1><p><em>注解Annotations</em>, 一种元数据的格式,提供程序相关的数据而不是程序本身. 注解并不会直接影响所标注的代码的影响。</p>
<p>注解有一系列的作用，分别如下:</p>
<ul>
<li><strong>编译所用的注解信息</strong> — 注解可以用来侦测错误或者忽略警告.</li>
<li><strong>编译时以及部署时的处理Compile-time and deployment-time processing</strong> — 软件工具可以处理注解信息来生成代码,XML文件等。</li>
<li><strong>运行时的处理Runtime processing</strong> — 某些注解可在运行时检测.</li>
</ul>
<p>本课程解释了哪里可以用到注解，如何应用注解，JavaSE api预定义了那些可用的注解类型，注解类型如何与插件式的系统想结果写出强壮的类型检查代码，以及如何实现可重复的注解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;课程-注解&quot;&gt;&lt;a href=&quot;#课程-注解&quot; class=&quot;headerlink&quot; title=&quot;课程: 注解&quot;&gt;&lt;/a&gt;课程: 注解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;注解Annotations&lt;/em&gt;, 一种元数据的格式,提供程序相关的数据而不是程序本身. 注解并不会
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="annotation" scheme="http://yoursite.com/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：注解基础</title>
    <link href="http://yoursite.com/2018/03/21/java-tutorial-learning_annotation_basic/"/>
    <id>http://yoursite.com/2018/03/21/java-tutorial-learning_annotation_basic/</id>
    <published>2018-03-21T09:26:59.000Z</published>
    <updated>2018-03-21T09:55:27.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解基础"><a href="#注解基础" class="headerlink" title="注解基础"></a>注解基础</h1><h2 id="注解的格式"><a href="#注解的格式" class="headerlink" title="注解的格式"></a>注解的格式</h2><p>最贱的注解格式实例如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div></pre></td></tr></table></figure>
<p>标志符号 (<code>@</code>) 向编译器表示紧跟着的信息是注解，下面的例子注解的名字为<code>Override</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySuperMethod</span><span class="params">()</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>注解可以包含元素 <em>elements</em>,可以是署名的，也可以是匿名的，元素有对应的值:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Author</span>(</div><div class="line">   name = <span class="string">"Benjamin Franklin"</span>,</div><div class="line">   date = <span class="string">"3/27/2003"</span></div><div class="line">)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>() </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(value = <span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>如果只有一个名为<code>value</code>的元素，那么元素署名可以省略，如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>如果注解不包含元素，那么小括号也可以移除，就像之前的<code>@Override</code>注解.</p>
<p>也可以在统一个声明或者定义处使用多个注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Author</span>(name = <span class="string">"Jane Doe"</span>)</div><div class="line"><span class="meta">@EBook</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>如果多个注解拥有同样的类型，叫做重复注解repeating annotation:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Author</span>(name = <span class="string">"Jane Doe"</span>)</div><div class="line"><span class="meta">@Author</span>(name = <span class="string">"John Smith"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>重复注解在Java SE8中支持的，获取更多相关信息可以参看 <a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="external">Repeating Annotations</a>.</p>
<p>注解类型可以是<code>java.lang</code>或者<code>java.lang.annotation</code>包中的一种。之前的例子中<code>Override</code> and <code>SuppressWarnings</code> 是 <a href="https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html" target="_blank" rel="external">预定义注解predefined Java annotations</a>.你也可以定义自己的注解类型， <code>Author</code> 和 <code>Ebook</code> 注解是自定义注解类型。</p>
<h2 id="注解可以用在哪里"><a href="#注解可以用在哪里" class="headerlink" title="注解可以用在哪里"></a>注解可以用在哪里</h2><p>注解可以用定义：类，字段，方法以及其他编程元素定义时可以使用。挡在定义时使用注解，按照惯例每一个注解占一行.</p>
<p>Java SE8 版本中，注解同样可以应用在类型使用时，以下是一些列子:</p>
<ul>
<li><p>类型实例创建表达式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new @Interned MyObject();</div></pre></td></tr></table></figure>
</li>
<li><p>类型转换:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myString = (@NonNull String) str;</div></pre></td></tr></table></figure>
</li>
<li><p><code>implements</code> 引用时:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class UnmodifiableList&lt;T&gt; implements</div><div class="line">    @Readonly List&lt;@Readonly T&gt; &#123; ... &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>声明抛出异常时:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void monitorTemperature() throws</div><div class="line">    @Critical TemperatureException &#123; ... &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这种形式的注解叫做类型注解 <em>type annotation</em>.获取更多相关信息，参考 <a href="https://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html" target="_blank" rel="external">类型注解与插件式类型系统Type Annotations and Pluggable Type Systems</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注解基础&quot;&gt;&lt;a href=&quot;#注解基础&quot; class=&quot;headerlink&quot; title=&quot;注解基础&quot;&gt;&lt;/a&gt;注解基础&lt;/h1&gt;&lt;h2 id=&quot;注解的格式&quot;&gt;&lt;a href=&quot;#注解的格式&quot; class=&quot;headerlink&quot; title=&quot;注解的格式&quot;&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="annotation" scheme="http://yoursite.com/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-枚举类</title>
    <link href="http://yoursite.com/2018/03/19/java-tutorial-learning_class&amp;object_enum/"/>
    <id>http://yoursite.com/2018/03/19/java-tutorial-learning_class&amp;object_enum/</id>
    <published>2018-03-19T10:51:59.000Z</published>
    <updated>2018-03-19T10:27:32.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><p>枚举类型 <em>enum type</em> 是一种特殊的数据类型，可以使一个变量值为一组预定义的常量来。变量值必须等于预定义的常量值中的一个。常见的例子包括指南者中的方向(值 NORTH, SOUTH, EAST, and WEST) 以及一周中的每一天.</p>
<p>因为他们是常量，所以枚举类的成员都是用大写字母表示。</p>
<p>Java编程语言中，你可以使用<code>enum</code>关键字定义枚举类。例如，一周中的每一天可以定义如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Day &#123;</div><div class="line">    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,</div><div class="line">    THURSDAY, FRIDAY, SATURDAY </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可以在任何你想表达一组固定的常量集合时使用枚举类。包含了自然界中的列举类型例如太阳系中的行星以及任何你可能在编译时就知道的任何可能值—例如，菜单中的选项，命令行中的标记等等.</p>
<p>以下代码是如何使用上面定义的<code>Day</code>枚举类型:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</div><div class="line">    Day day;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnumTest</span><span class="params">(Day day)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.day = day;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tellItLikeItIs</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (day) &#123;</div><div class="line">            <span class="keyword">case</span> MONDAY:</div><div class="line">                System.out.println(<span class="string">"Mondays are bad."</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                    </div><div class="line">            <span class="keyword">case</span> FRIDAY:</div><div class="line">                System.out.println(<span class="string">"Fridays are better."</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                         </div><div class="line">            <span class="keyword">case</span> SATURDAY: <span class="keyword">case</span> SUNDAY:</div><div class="line">                System.out.println(<span class="string">"Weekends are best."</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                        </div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                System.out.println(<span class="string">"Midweek days are so-so."</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        EnumTest firstDay = <span class="keyword">new</span> EnumTest(Day.MONDAY);</div><div class="line">        firstDay.tellItLikeItIs();</div><div class="line">        EnumTest thirdDay = <span class="keyword">new</span> EnumTest(Day.WEDNESDAY);</div><div class="line">        thirdDay.tellItLikeItIs();</div><div class="line">        EnumTest fifthDay = <span class="keyword">new</span> EnumTest(Day.FRIDAY);</div><div class="line">        fifthDay.tellItLikeItIs();</div><div class="line">        EnumTest sixthDay = <span class="keyword">new</span> EnumTest(Day.SATURDAY);</div><div class="line">        sixthDay.tellItLikeItIs();</div><div class="line">        EnumTest seventhDay = <span class="keyword">new</span> EnumTest(Day.SUNDAY);</div><div class="line">        seventhDay.tellItLikeItIs();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Mondays are bad.</div><div class="line">Midweek days are so-so.</div><div class="line">Fridays are better.</div><div class="line">Weekends are best.</div><div class="line">Weekends are best.</div></pre></td></tr></table></figure>
<p>Java编程语言中的枚举类型比其他语言中的要更加欠打。 <code>enum</code> 声明定义了一个类(交过枚举类型 <em>enum type</em>).枚举类型，类体也可以包含方法以及其他成员。编译器在创建枚举类型时会自动的增加一些特殊的代码。例如，他们有已个静态的<code>values</code>方法可以返回包含所有定义的枚举值的数据。这个方法通常与<code>for-each</code>结构结合使用，来迭代枚举类中的所有类型。例如，下面的代码 <code>Planet</code> 类例子遍历了太阳系中的所有行星.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Planet p : Planet.values()) &#123;</div><div class="line">    System.out.printf(<span class="string">"Your weight on %s is %f%n"</span>,</div><div class="line">                      p, p.surfaceWeight(mass));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>注意</strong>:所有的枚举类型简单的继承了类 <code>java.lang.Enum</code>。因为Java只能继承自一个类（参考 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/classdecl.html" target="_blank" rel="external">Declaring Classes</a>).Java不支持多重继承 (参考 <a href="https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html" target="_blank" rel="external">Multiple Inheritance of State, Implementation, and Type</a>)，因此所有的枚举类都不能再继承任何类。</p>
<hr>
<p>下面的例子中，<code>Planet</code>是一个枚举类，代表了太阳系中的所有行星.他们通过的常量属性质量和半径来定义。</p>
<p>每一个枚举常量定义的同时包含了质量与半径参数。这些参数在常量创建的时候传递给构造器。Java要求常量必须首先声明，优先与任何的成员和方法。因此，当枚举类有额外的字段和方法时，枚举常量结束时必须以分号semicolon结束.</p>
<hr>
<p><strong>Note</strong>:枚举类的构造器必须是私有级别或者是包级的访问权限。它将在自动创建定义在枚举类体开始的常量。你不能自己调用枚举类的构造方法。</p>
<hr>
<p>另外，对于他的属性和构造器，<code>Planet</code>提供方法允许你获取每一个行星的表面重力以及重量。下面是一个简单的程序，获取你在地球的体重（任一单位）并计算出你在其他所有星球的体重（同样单位下）:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Planet &#123;</div><div class="line">    MERCURY (<span class="number">3.303e+23</span>, <span class="number">2.4397e6</span>),</div><div class="line">    VENUS   (<span class="number">4.869e+24</span>, <span class="number">6.0518e6</span>),</div><div class="line">    EARTH   (<span class="number">5.976e+24</span>, <span class="number">6.37814e6</span>),</div><div class="line">    MARS    (<span class="number">6.421e+23</span>, <span class="number">3.3972e6</span>),</div><div class="line">    JUPITER (<span class="number">1.9e+27</span>,   <span class="number">7.1492e7</span>),</div><div class="line">    SATURN  (<span class="number">5.688e+26</span>, <span class="number">6.0268e7</span>),</div><div class="line">    URANUS  (<span class="number">8.686e+25</span>, <span class="number">2.5559e7</span>),</div><div class="line">    NEPTUNE (<span class="number">1.024e+26</span>, <span class="number">2.4746e7</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;   <span class="comment">// in kilograms</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius; <span class="comment">// in meters</span></div><div class="line">    Planet(<span class="keyword">double</span> mass, <span class="keyword">double</span> radius) &#123;</div><div class="line">        <span class="keyword">this</span>.mass = mass;</div><div class="line">        <span class="keyword">this</span>.radius = radius;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">mass</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mass; &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">radius</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> radius; &#125;</div><div class="line"></div><div class="line">    <span class="comment">// universal gravitational constant  (m3 kg-1 s-2)</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> G = <span class="number">6.67300E-11</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">surfaceGravity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> G * mass / (radius * radius);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">surfaceWeight</span><span class="params">(<span class="keyword">double</span> otherMass)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> otherMass * surfaceGravity();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</div><div class="line">            System.err.println(<span class="string">"Usage: java Planet &lt;earth_weight&gt;"</span>);</div><div class="line">            System.exit(-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> earthWeight = Double.parseDouble(args[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">double</span> mass = earthWeight/EARTH.surfaceGravity();</div><div class="line">        <span class="keyword">for</span> (Planet p : Planet.values())</div><div class="line">           System.out.printf(<span class="string">"Your weight on %s is %f%n"</span>,</div><div class="line">                             p, p.surfaceWeight(mass));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你运行这个类 <code>Planet.class</code> 并且输入参数175, 可以说的如下输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ java Planet 175</div><div class="line">Your weight on MERCURY is 66.107583</div><div class="line">Your weight on VENUS is 158.374842</div><div class="line">Your weight on EARTH is 175.000000</div><div class="line">Your weight on MARS is 66.279007</div><div class="line">Your weight on JUPITER is 442.847567</div><div class="line">Your weight on SATURN is 186.552719</div><div class="line">Your weight on URANUS is 158.397260</div><div class="line">Your weight on NEPTUNE is 199.207413</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;枚举类&quot;&gt;&lt;a href=&quot;#枚举类&quot; class=&quot;headerlink&quot; title=&quot;枚举类&quot;&gt;&lt;/a&gt;枚举类&lt;/h1&gt;&lt;p&gt;枚举类型 &lt;em&gt;enum type&lt;/em&gt; 是一种特殊的数据类型，可以使一个变量值为一组预定义的常量来。变量值必须等于预定义的常
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="enum" scheme="http://yoursite.com/tags/enum/"/>
    
      <category term="枚举类" scheme="http://yoursite.com/tags/%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-嵌套类问题与联系</title>
    <link href="http://yoursite.com/2018/03/19/java-tutorial-learning_class&amp;object_nested_class_q&amp;e/"/>
    <id>http://yoursite.com/2018/03/19/java-tutorial-learning_class&amp;object_nested_class_q&amp;e/</id>
    <published>2018-03-19T09:51:59.000Z</published>
    <updated>2018-03-19T09:41:58.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="嵌套类：问题与练习"><a href="#嵌套类：问题与练习" class="headerlink" title="嵌套类：问题与练习"></a>嵌套类：问题与练习</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p><strong>问题</strong>: 程序 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/Problem.java" target="_blank" rel="external"><code>Problem.java</code></a> 不能编译，你需要怎么做才能让它成功编译?为什么?</p>
</li>
<li><p>使用 <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/Box.html" target="_blank" rel="external"><code>Box</code></a> 类(在 <code>javax.swing</code> 包中)的Java API文档 帮助你问答如下问题 .</p>
<ol>
<li><p><strong>问题</strong>: <code>Box</code> 定义了什么静态嵌套类?</p>
</li>
<li><p><strong>问题</strong>:  <code>Box</code> 定义了什么内部类?</p>
</li>
<li><p><strong>问题</strong>:  <code>Box</code>的内部类的父类是什么?</p>
</li>
<li><p><strong>问题</strong>:  <code>Box</code>的哪一个嵌套类你可以在任何一个类中使用?</p>
</li>
<li><p><strong>问题</strong>: 如何创建一个 <code>Box</code>的`Filler嵌套类的实例?</p>
</li>
</ol>
</li>
</ol>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li><p><strong>练习</strong>: 获取文件 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/Class1.java" target="_blank" rel="external"><code>Class1.java</code></a>. 编译并运行 <code>Class1</code>. 输出是什么?</p>
</li>
<li><p><strong>练习</strong>: 下面的联系涉及到修改 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/DataStructure.java" target="_blank" rel="external"><code>DataStructure.java</code></a>类, 该类在 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html" target="_blank" rel="external">Inner Class Example</a> 中有讨论.</p>
<ol>
<li>定义一个名为 <code>print(DataStructureIterator iterator)</code>的方法.用一个类<code>EvenIterator</code>类的实例调用这个方法实现<code>printEven</code>方法的功能。</li>
</ol>
</li>
</ol>
<ol>
<li>调用方法 <code>print(DataStructureIterator iterator)</code> 来打印奇数索引的元素.使用一个匿名类作为方法的参数，代替接口 <code>DataStructureIterator</code>的实例.</li>
</ol>
<ol>
<li>定义一个方法 <code>print(java.util.Function&lt;Integer, Boolean&gt; iterator)</code> 实现 <code>print(DataStructureIterator iterator)</code>相同的功能.通过一个lambda表达式参数调用该方法实现打印出偶数下标的元素，重新用lambda表达式参数调用并实现打印出奇数下标的元素。</li>
</ol>
<ol>
<li><p>定义两个方法可以是如下语句分别打印偶数下标对应的值和技术下标对应的值:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DataStructure ds = <span class="keyword">new</span> DataStructure()</div><div class="line"><span class="comment">// ...</span></div><div class="line">ds.print(DataStructure::isEvenIndex);</div><div class="line">ds.print(DataStructure::isOddIndex);</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="嵌套类：问题与练习答案"><a href="#嵌套类：问题与练习答案" class="headerlink" title="嵌套类：问题与练习答案"></a>嵌套类：问题与练习答案</h1><a id="more"></a>
<h2 id="问题答案"><a href="#问题答案" class="headerlink" title="问题答案"></a>问题答案</h2><ol>
<li><p><strong>问题</strong>: 程序 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/Problem.java" target="_blank" rel="external"><code>Problem.java</code></a> 不能编译，你需要怎么做才能让它成功编译?为什么?</p>
<p><strong>答案</strong>: 删除<code>Inner</code>类的<code>static</code>关键字修饰。静态嵌套类不能访问外部类的实例成员参考 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/ProblemSolved.java" target="_blank" rel="external"><code>ProblemSolved.java</code></a>.</p>
</li>
<li><p>使用 <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/Box.html" target="_blank" rel="external"><code>Box</code></a> 类(在 <code>javax.swing</code> 包中)的Java API文档 帮助你问答如下问题 .</p>
<ol>
<li><p><strong>问题</strong>: <code>Box</code> 定义了什么静态嵌套类?</p>
<p><strong>答案</strong>: <code>Box.Filler</code></p>
</li>
<li><p><strong>问题</strong>:  <code>Box</code> 定义了什么内部类?</p>
<p><strong>答案</strong>: <code>Box.AccessibleBox</code></p>
</li>
<li><p><strong>问题</strong>:  <code>Box</code>的内部类的父类是什么?</p>
<p><strong>答案</strong>: <code>[java.awt.]Container.AccessibleAWTContainer</code></p>
</li>
<li><p><strong>问题</strong>:  <code>Box</code>的哪一个嵌套类你可以在任何一个类中使用?</p>
<p><strong>答案</strong>: <code>Box.Filler</code></p>
</li>
<li><p><strong>问题</strong>: 如何创建一个 <code>Box</code>的`Filler嵌套类的实例?</p>
<p><strong>答案</strong>: <code>new Box.Filler(minDimension, prefDimension, maxDimension)</code></p>
</li>
</ol>
</li>
</ol>
<h2 id="练习答案"><a href="#练习答案" class="headerlink" title="练习答案"></a>练习答案</h2><ol>
<li><p><strong>练习</strong>: 获取文件 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/Class1.java" target="_blank" rel="external"><code>Class1.java</code></a>. 编译并运行 <code>Class1</code>. 输出是什么?</p>
<p><strong>答案</strong>: <code>InnerClass1: getString invoked.InnerClass1: getAnotherString invoked.</code></p>
</li>
<li><p><strong>练习</strong>: 下面的联系涉及到修改 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/DataStructure.java" target="_blank" rel="external"><code>DataStructure.java</code></a>类, 该类在 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html" target="_blank" rel="external">Inner Class Example</a> 中有讨论.</p>
<ol>
<li><p>定义一个名为 <code>print(DataStructureIterator iterator)</code>的方法.用一个类<code>EvenIterator</code>类的实例调用这个方法实现<code>printEven</code>方法的功能。</p>
<p><strong>提示</strong>: 一下语句在<code>main</code>方法中奖不能通过编译:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DataStructure ds = <span class="keyword">new</span> DataStructure();</div><div class="line">ds.print(<span class="keyword">new</span> EvenIterator());</div></pre></td></tr></table></figure>
<p>编译器产生错误信息 “non-static variable this cannot be referenced from a static context—非京台的变量不能再静态上下文中引用”，表达式 <code>new EvenIterator()</code>会产生这个错误. 类 <code>EvenIterator</code> 是一个内部类，非静态.意味着你必须在外部类的一个实例中创建它的实例, <code>DataStructure</code>数据结构.</p>
<p>你尅定义一个方法 <code>DataStructure</code> 来创建和返回<code>EvenIterator</code>的实例.</p>
</li>
<li><p>调用方法 <code>print(DataStructureIterator iterator)</code> 来打印奇数索引的元素.使用一个匿名类作为方法的参数，代替接口 <code>DataStructureIterator</code>的实例.</p>
<p><strong>提示</strong>:你无法访问 <code>DataStructure</code>之外的私有成员 <code>SIZE</code> 和 <code>arrayOfInts</code> ，意味着你不能从匿名类访问定义在其之外的私用成员.</p>
</li>
<li><p>定义一个方法 <code>print(java.util.Function&lt;Integer, Boolean&gt; iterator)</code> 实现 <code>print(DataStructureIterator iterator)</code>相同的功能.通过一个lambda表达式参数调用该方法实现打印出偶数下标的元素，重新用lambda表达式参数调用并实现打印出奇数下标的元素。</p>
<p><strong>提示</strong>: 在 <code>print</code> 方法中,你可以通过<code>for</code>语句遍历<code>arrayOfInts</code>.对于每一个下标志，调用<code>function.apply</code>方法。如果方法返回<code>True</code>，打印出下表对应的元素值。</p>
<p>为了实现打印偶数下标的值,你可以定义特定的Lambda表达式实现 <code>Boolean Function.apply(Integer t)</code>方法.表达式接受一个 <code>Integer</code> 参数 (下标)并且返回一个布尔值 (<code>Boolean.TRUE</code> 如果下标是偶数, 否则返回<code>Boolean.FALSE</code> ).</p>
</li>
<li><p>定义两个方法可以是如下语句分别打印偶数下标对应的值和技术下标对应的值:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DataStructure ds = <span class="keyword">new</span> DataStructure()</div><div class="line"><span class="comment">// ...</span></div><div class="line">ds.print(DataStructure::isEvenIndex);</div><div class="line">ds.print(DataStructure::isOddIndex);</div></pre></td></tr></table></figure>
<p><strong>提示</strong>: 在类中 <code>DataStructure</code> 创建两个名为 <code>isEvenIndex</code> 和 <code>isOddIndex</code> 的方法，两个方法拥有同样的参数列和且返回类型，同抽象方法 <code>Boolean Function&lt;Integer, Boolean&gt;.apply(Integer t)</code>一致. 这两个方法同样接受 <code>Integer</code> 参数 (下标志) 并且返回 <code>Boolean</code> 值.</p>
</li>
</ol>
<p><strong>答案</strong>: 参考文件<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/DataStructure.java" target="_blank" rel="external"><code>DataStructure.java</code></a>.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;嵌套类：问题与练习&quot;&gt;&lt;a href=&quot;#嵌套类：问题与练习&quot; class=&quot;headerlink&quot; title=&quot;嵌套类：问题与练习&quot;&gt;&lt;/a&gt;嵌套类：问题与练习&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;: 程序 &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/Problem.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Problem.java&lt;/code&gt;&lt;/a&gt; 不能编译，你需要怎么做才能让它成功编译?为什么?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/javax/swing/Box.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; 类(在 &lt;code&gt;javax.swing&lt;/code&gt; 包中)的Java API文档 帮助你问答如下问题 .&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;: &lt;code&gt;Box&lt;/code&gt; 定义了什么静态嵌套类?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;:  &lt;code&gt;Box&lt;/code&gt; 定义了什么内部类?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;:  &lt;code&gt;Box&lt;/code&gt;的内部类的父类是什么?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;:  &lt;code&gt;Box&lt;/code&gt;的哪一个嵌套类你可以在任何一个类中使用?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;: 如何创建一个 &lt;code&gt;Box&lt;/code&gt;的`Filler嵌套类的实例?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;练习&lt;/strong&gt;: 获取文件 &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/QandE/Class1.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Class1.java&lt;/code&gt;&lt;/a&gt;. 编译并运行 &lt;code&gt;Class1&lt;/code&gt;. 输出是什么?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;练习&lt;/strong&gt;: 下面的联系涉及到修改 &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/examples/DataStructure.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;DataStructure.java&lt;/code&gt;&lt;/a&gt;类, 该类在 &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inner Class Example&lt;/a&gt; 中有讨论.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义一个名为 &lt;code&gt;print(DataStructureIterator iterator)&lt;/code&gt;的方法.用一个类&lt;code&gt;EvenIterator&lt;/code&gt;类的实例调用这个方法实现&lt;code&gt;printEven&lt;/code&gt;方法的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;调用方法 &lt;code&gt;print(DataStructureIterator iterator)&lt;/code&gt; 来打印奇数索引的元素.使用一个匿名类作为方法的参数，代替接口 &lt;code&gt;DataStructureIterator&lt;/code&gt;的实例.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;定义一个方法 &lt;code&gt;print(java.util.Function&amp;lt;Integer, Boolean&amp;gt; iterator)&lt;/code&gt; 实现 &lt;code&gt;print(DataStructureIterator iterator)&lt;/code&gt;相同的功能.通过一个lambda表达式参数调用该方法实现打印出偶数下标的元素，重新用lambda表达式参数调用并实现打印出奇数下标的元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义两个方法可以是如下语句分别打印偶数下标对应的值和技术下标对应的值:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DataStructure ds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DataStructure()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ds.print(DataStructure::isEvenIndex);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ds.print(DataStructure::isOddIndex);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;嵌套类：问题与练习答案&quot;&gt;&lt;a href=&quot;#嵌套类：问题与练习答案&quot; class=&quot;headerlink&quot; title=&quot;嵌套类：问题与练习答案&quot;&gt;&lt;/a&gt;嵌套类：问题与练习答案&lt;/h1&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="匿名类" scheme="http://yoursite.com/tags/%E5%8C%BF%E5%90%8D%E7%B1%BB/"/>
    
      <category term="嵌套类" scheme="http://yoursite.com/tags/%E5%B5%8C%E5%A5%97%E7%B1%BB/"/>
    
      <category term="局部类" scheme="http://yoursite.com/tags/%E5%B1%80%E9%83%A8%E7%B1%BB/"/>
    
      <category term="Lambda" scheme="http://yoursite.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-何时使用嵌套类，局部类，匿名类，Lambda</title>
    <link href="http://yoursite.com/2018/03/19/java-tutorial-learning_class&amp;object_when_to_use/"/>
    <id>http://yoursite.com/2018/03/19/java-tutorial-learning_class&amp;object_when_to_use/</id>
    <published>2018-03-19T06:51:59.000Z</published>
    <updated>2018-03-19T09:02:44.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="何时使用嵌套类，局部类，匿名类，Lambda表达式"><a href="#何时使用嵌套类，局部类，匿名类，Lambda表达式" class="headerlink" title="何时使用嵌套类，局部类，匿名类，Lambda表达式"></a>何时使用嵌套类，局部类，匿名类，Lambda表达式</h1><p>正如在嵌套类 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html" target="_blank" rel="external">Nested Classes</a>一章节中提到的,嵌套类可以使你将只是用一次的代码符合逻辑的整理到一块，增加代码的封装性，创建更可读和易于管理的代码。局部类，匿名类以及Lambda表达式同样适用于这些优势；并且他们可以用于更加具体的场景:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html" target="_blank" rel="external">局部类Local class</a>: 如果你需要创建类的不止一个实例，访问其构造函数，或者引入新的命名类型（因为，譬如你需要在后续条用额外的方法).</li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html" target="_blank" rel="external">匿名类Anonymous class</a>: 如果你需要定义额外的字段或者方法就使用匿名类.</li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda表达式Lambda expression</a>:<ul>
<li>如果你想要封装一个单独的行为床底给其他的代码就是用Lambda表达式。例如，你你需要创建一个具体的作用于集合中每个元素的操作，当一个程序完成时的处理，或者程序遇到错误的处理。</li>
<li>当你需要你功能接口的你个简单实例并且不需要预先的条件限制。（例如，你不需要使用构造器，不需要明明类型，字段，或者额外的方法）</li>
</ul>
</li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html" target="_blank" rel="external">嵌套类Nested class</a>: 当你的需求与局部类相似，但是又想让类有更广的可用范围，并且你不需要访问局部变量和更多的方法参数就使用嵌套类。<ul>
<li>使用非静态的嵌套类（或者内部类）如果你需要访问闭合空间内的非公有字段或者方法。是用静态的嵌套类如果你不需要这些访问接入。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;何时使用嵌套类，局部类，匿名类，Lambda表达式&quot;&gt;&lt;a href=&quot;#何时使用嵌套类，局部类，匿名类，Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;何时使用嵌套类，局部类，匿名类，Lambda表达式&quot;&gt;&lt;/a&gt;何时使用嵌套类，局部类
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="匿名类" scheme="http://yoursite.com/tags/%E5%8C%BF%E5%90%8D%E7%B1%BB/"/>
    
      <category term="嵌套类" scheme="http://yoursite.com/tags/%E5%B5%8C%E5%A5%97%E7%B1%BB/"/>
    
      <category term="局部类" scheme="http://yoursite.com/tags/%E5%B1%80%E9%83%A8%E7%B1%BB/"/>
    
      <category term="Lambda" scheme="http://yoursite.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-Lambda表达式</title>
    <link href="http://yoursite.com/2018/03/15/java-tutorial-learning_the_lang_basic_lambda/"/>
    <id>http://yoursite.com/2018/03/15/java-tutorial-learning_the_lang_basic_lambda/</id>
    <published>2018-03-15T07:51:59.000Z</published>
    <updated>2018-03-19T08:11:25.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lambda-表达式-Lambda-Expressions"><a href="#Lambda-表达式-Lambda-Expressions" class="headerlink" title="Lambda 表达式 Lambda Expressions"></a>Lambda 表达式 Lambda Expressions</h1><p>使用匿名类的一个问题在于，如果你要实现的匿名类非常的简单，例如只包含一个方法的借口，那么匿名列的语法看起来就不够简洁和轻便。这种情况下，你通常会尝试将某个功能作为参数传递给一其他方法，例如当点击按钮的时候会采取什么措施。Lambda表达式可以提供这样的功能，将功能作为方法的参数，或者代码作为数据。</p>
<p>上一节中， <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html" target="_blank" rel="external">Anonymous Classes</a>, 向你展示了实现一个基本的类而不需要命名，譬如只有一个方法的类，不过匿名类看起来有点复杂和笨重。Lambda表达式可以使你更加紧凑的表达一个单方法类的实例。</p>
<p>本节将包含以下的内容:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#use-case" target="_blank" rel="external">Lambda表达式的经典应用Ideal Use Case for Lambda Expressions</a><ul>
<li><a href="#approach1">方法1：创建搜索某一特点的成员的方法Approach 1: Create Methods That Search for Members That Match One Characteristic</a></li>
<li><a href="#approach2">方法2：创建更加通用的搜索方法Approach 2: Create More Generalized Search Methods</a></li>
<li><a href="#approach3">方法3：用局部类实现特定搜索规则相关的的代码Approach 3: Specify Search Criteria Code in a Local Class</a></li>
<li><a href="#approach4">方法4：用匿名类实现特定搜索规则相关的代码Approach 4: Specify Search Criteria Code in an Anonymous Class</a></li>
<li><a href="#approach5">方法5：用Lambda表达式实现特定搜索规则的代码Approach 5: Specify Search Criteria Code with a Lambda Expression</a></li>
<li><a href="#approach6">方法6：通过标准的功能接口使用lambda表达式Approach 6: Use Standard Functional Interfaces with Lambda Expressions</a></li>
<li><a href="#approach7">方法7：在你的应用中使用Lambda表达式Approach 7: Use Lambda Expressions Throughout Your Application</a></li>
<li><a href="#approach8">方法8：使用反应提高可扩展性Approach 8: Use Generics More Extensively</a></li>
<li><a href="#approach9">方法9：使用已Lambda表达式作为参数的聚合操作Approach 9: Use Aggregate Operations That Accept Lambda Expressions as Parameters</a></li>
</ul>
</li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#lambda-expressions-in-gui-applications" target="_blank" rel="external">在GUI应用中使用Lambda表达式Lambda Expressions in GUI Applications</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#syntax" target="_blank" rel="external">Lambda表达式语法Syntax of Lambda Expressions</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#accessing-local-variables" target="_blank" rel="external">访问闭合区间的局部变量Accessing Local Variables of the Enclosing Scope</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#target-typing" target="_blank" rel="external">目标类型Target Typing</a><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#target-types-and-method-arguments" target="_blank" rel="external">目标类型以及方法参数Target Types and Method Arguments</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#serialization" target="_blank" rel="external">序列化Serialization</a></li>
</ul>
<a id="more"></a>
<h2 id="Lambda表达式最佳实践Ideal-Use-Case-for-Lambda-Expressions"><a href="#Lambda表达式最佳实践Ideal-Use-Case-for-Lambda-Expressions" class="headerlink" title="Lambda表达式最佳实践Ideal Use Case for Lambda Expressions"></a><a href="">Lambda表达式最佳实践Ideal Use Case for Lambda Expressions</a></h2><p>假设你正在创建一个社交网络应用。你想要创建一个功能来满足管理员的各种操作，例如，向社交网络应用中中满足特定规则的成员发送消息。下面的表格描述了这个案例的详细信息。</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>名称</td>
<td>对选择的成员进行操作</td>
</tr>
<tr>
<td>主要角色</td>
<td>管理员Administrator</td>
</tr>
<tr>
<td>前置条件</td>
<td>管理员已登录到系统</td>
</tr>
<tr>
<td>完成条件</td>
<td>操作只对符合特定规则的成员生效</td>
</tr>
<tr>
<td>内容梗概</td>
<td>管理员确定要执行操作的成员。管理员明确要执行的操作。管理员选择Submit按钮。系统找到所有满足条件的成员。系统对所有符合条件成员执行操作</td>
</tr>
<tr>
<td>扩展</td>
<td>1a. 管理员可以在提交操作之前预览那些符合条件的成员。</td>
</tr>
<tr>
<td>发生频率Frequency</td>
<td>每天数次</td>
</tr>
</tbody>
</table>
<p>假设社交网络应用中的成员可以用如下的 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/Person.java" target="_blank" rel="external"><code>Person</code></a> 类表示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Sex &#123;</div><div class="line">        MALE, FEMALE</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String name;</div><div class="line">    LocalDate birthday;</div><div class="line">    Sex gender;</div><div class="line">    String emailAddress;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printPerson</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设你社交网络应用中的成员是存储在一个 <code>List&lt;Person&gt;</code> 实例中.</p>
<p>本章开始用一种稚拙的方法实现这个用例。然后使用局部类类和匿名类来改进，最后使用lambda表达式通过一种高效和简洁的方式完成。本章节中 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/RosterTest.java" target="_blank" rel="external"><code>RosterTest</code></a>例子中可以找到相关的代码片段。.</p>
<h3 id="方法1：创建搜索符合某些特征的成员的方法"><a href="#方法1：创建搜索符合某些特征的成员的方法" class="headerlink" title="方法1：创建搜索符合某些特征的成员的方法"></a><a href="">方法1：创建搜索符合某些特征的成员的方法</a></h3><p>一个简单的途径就是创建数个方法methods;每一个方法搜索符合一个特征的成员，譬如性别或者年龄。下面的代码打印出了年龄大于某特定年龄的成员:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPersonsOlderThan</span><span class="params">(List&lt;Person&gt; roster, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Person p : roster) &#123;</div><div class="line">        <span class="keyword">if</span> (p.getAge() &gt;= age) &#123;</div><div class="line">            p.printPerson();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>:  <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" target="_blank" rel="external"><code>List</code></a> 是一个有序的集合 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html" target="_blank" rel="external"><code>Collection</code></a>. 集合是在一个单独单眼里包含多个元素的对象。集合是用来存储，获取，操作以及表达集合数据。参考 <a href="https://docs.oracle.com/javase/tutorial/collections/index.html" target="_blank" rel="external">Collections</a> 获取更多集合相关的信息.</p>
<p>这种方法可能使你的应用非常的脆弱，譬如可能英文介绍里提到的扩展(例如新的数据类型)而导致程序无法工作。假设你应用的升级改变了<code>Person</code>类的数据结构，该数据结构包含了不同的成员变量；或许类使用了不同的数据类型来存储年龄，或者用不同的算法来计量年龄。你就不得不重写你的API来满足这些改变。另外，这个方法还有不必要的限制，如果你想要打印出小于特定年龄的成员时改怎么办呢?</p>
<h3 id="方案2：创建更加通用的方法Approach-2-Create-More-Generalized-Search-Methods"><a href="#方案2：创建更加通用的方法Approach-2-Create-More-Generalized-Search-Methods" class="headerlink" title="方案2：创建更加通用的方法Approach 2: Create More Generalized Search Methods"></a><a href="">方案2：创建更加通用的方法Approach 2: Create More Generalized Search Methods</a></h3><p>下面的方法比上一个方法<code>printPersonOlderThan</code>更通用一些；可以打印出特定年龄范围的成员：:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPersonsWithinAgeRange</span><span class="params">(</span></span></div><div class="line">    List&lt;Person&gt; roster, <span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</div><div class="line">    <span class="keyword">for</span> (Person p : roster) &#123;</div><div class="line">        <span class="keyword">if</span> (low &lt;= p.getAge() &amp;&amp; p.getAge() &lt; high) &#123;</div><div class="line">            p.printPerson();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么如果你想要打印出某一性别，或者是某一性别和特定年龄范围组合的相关成员？如果你决定改变<code>Person</code>类型的属性增加诸如情感状态或者地理位置？尽管这个方法比之前的方法更通用，但是尝试为每一种可能的搜索都创建单独的方法同样导致脆弱的代码。你可以将说明具体搜索范围的代码分割出来，创建另外一个类。</p>
<h3 id="方案3：在局部类中说明搜索标准Approach-3-Specify-Search-Criteria-Code-in-a-Local-Class"><a href="#方案3：在局部类中说明搜索标准Approach-3-Specify-Search-Criteria-Code-in-a-Local-Class" class="headerlink" title="方案3：在局部类中说明搜索标准Approach 3: Specify Search Criteria Code in a Local Class"></a><a href="">方案3：在局部类中说明搜索标准Approach 3: Specify Search Criteria Code in a Local Class</a></h3><p>下面的方法打印出符合你搜索标准的成员:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPersons</span><span class="params">(</span></span></div><div class="line">    List&lt;Person&gt; roster, CheckPerson tester) &#123;</div><div class="line">    <span class="keyword">for</span> (Person p : roster) &#123;</div><div class="line">        <span class="keyword">if</span> (tester.test(p)) &#123;</div><div class="line">            p.printPerson();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法检查<code>List</code>参数<code>roster</code>中的每一个<code>Person</code>实例是否满搜索标准，通过调用<code>CheckPerson</code>参数<code>tester</code>的<code>test</code>方法来实现。如果<code>tester.test</code>返回一个<code>True</code>，呢么<code>Person</code>实例中的<code>printPerson</code>方法就回被调用.</p>
<p>针对不同的搜索标准，你需要实现<code>CheckPerson</code>接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CheckPerson</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person p)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面的类实现了<code>CheckPerson</code>接口，明确了<code>test</code>方法的一个具体实现。这个方法过滤了符合美国服兵役条件的成员:如果<code>Person</code>参数是男性并且年龄在18到25之间则返回<code>True</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckPersonEligibleForSelectiveService</span> <span class="keyword">implements</span> <span class="title">CheckPerson</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person p)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p.gender == Person.Sex.MALE &amp;&amp;</div><div class="line">            p.getAge() &gt;= <span class="number">18</span> &amp;&amp;</div><div class="line">            p.getAge() &lt;= <span class="number">25</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这个类，你创建一个新的<code>Person</code>实例并且调用<code>printPersons</code>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">printPersons(</div><div class="line">    roster, <span class="keyword">new</span> CheckPersonEligibleForSelectiveService());</div></pre></td></tr></table></figure>
<p>尽管这个方案没有那么脆弱了——当你改变Person的数据结构时，无需再重写你的方法——当你仍然需要额外的代码：一个新的结构以及一个本地类来查询你计划进行操作的成员。因为<code>CheckPersonEligibleForSelectiveService</code>实现了一个接口，所以你可以通过匿名类来代替局部类，并且可以避免对每一中搜索都创建一个新的类。</p>
<h3 id="方案4：Approach-4-Specify-Search-Criteria-Code-in-an-Anonymous-Class"><a href="#方案4：Approach-4-Specify-Search-Criteria-Code-in-an-Anonymous-Class" class="headerlink" title="方案4：Approach 4: Specify Search Criteria Code in an Anonymous Class"></a><a href="">方案4：Approach 4: Specify Search Criteria Code in an Anonymous Class</a></h3><p>下列代码中<code>printPersons</code>方法调用中的一个参数是一个匿名类，这个匿名类筛选出美国需要服兵役的成员:年龄介于18到25岁的男性成员。:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">printPersons(</div><div class="line">    roster,</div><div class="line">    <span class="keyword">new</span> CheckPerson() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person p)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> p.getGender() == Person.Sex.MALE</div><div class="line">                &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">                &amp;&amp; p.getAge() &lt;= <span class="number">25</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>这个方案减少了必须的代码，因为你不需要为每一个查询都创建一个新的类。然而，匿名类的语法非常的笨重，考虑到<code>CheckPerson</code>接口中实际只包含了一个方法。在这种情况下，你可以使用你个lambda表达式来代替匿名类，也就是下一节所讲的内容.</p>
<h3 id="方案5：使用lambda表达式表明搜索标准Approach-5-Specify-Search-Criteria-Code-with-a-Lambda-Expression"><a href="#方案5：使用lambda表达式表明搜索标准Approach-5-Specify-Search-Criteria-Code-with-a-Lambda-Expression" class="headerlink" title="方案5：使用lambda表达式表明搜索标准Approach 5: Specify Search Criteria Code with a Lambda Expression"></a><a href="">方案5：使用lambda表达式表明搜索标准Approach 5: Specify Search Criteria Code with a Lambda Expression</a></h3><p><code>CheckPerson</code>接口是一个<em>functional interface</em>功能接口.功能接口是指只包含一个抽象方法 <a href="https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html" target="_blank" rel="external">abstract method</a>的接口. (当然功能接口可能包含一个或者多个默认方法 <a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="external">default methods</a>或者静态方法 <a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html#static" target="_blank" rel="external">static methods</a>.) 因为一个功能接口只包含了一个抽象方法，当你实现它的时候你可以移除方法名。这么做就替代了匿名类的表达式，使用了lambda表达式 <em>lambda expression</em>,正如如下代码方法调用中说所用的样子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">printPersons(</div><div class="line">    roster,</div><div class="line">    (Person p) -&gt; p.getGender() == Person.Sex.MALE</div><div class="line">        &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">        &amp;&amp; p.getAge() &lt;= <span class="number">25</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>参考 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#syntax" target="_blank" rel="external">Lambda 表达式语法Syntax of Lambda Expressions</a>获取如何定义Lambda表达式的更多信息.</p>
<p>你可以使用标准的功能接口来代替<code>CheckPerson</code>接口，可以进一步减少所需的代码量.</p>
<h3 id="方法6：使用标准的功能接口实现Lambda表达式Approach-6-Use-Standard-Functional-Interfaces-with-Lambda-Expressions"><a href="#方法6：使用标准的功能接口实现Lambda表达式Approach-6-Use-Standard-Functional-Interfaces-with-Lambda-Expressions" class="headerlink" title="方法6：使用标准的功能接口实现Lambda表达式Approach 6: Use Standard Functional Interfaces with Lambda Expressions"></a><a href="">方法6：使用标准的功能接口实现Lambda表达式Approach 6: Use Standard Functional Interfaces with Lambda Expressions</a></h3><p>重现审视CheckPerson 接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CheckPerson</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person p)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个非常简单的是接口。因为他只包含一个抽象方法所以他是一个功能接口。这个方法接口一个参数并返回布尔值。这个方法如此简单所以你没有必要再应用中定义它。因此，JDK定义了数个标准的功能接口，你可以在<code>java.util.function</code>包中找到这些接口。</p>
<p>例如，你个使用 <code>Predicate&lt;T&gt;</code>接口来代替 <code>CheckPerson</code>.这个接口包含了方法 <code>boolean test(T t)</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接口 <code>Predicate&lt;T&gt;</code> 是泛型接口的一个例子. (参考泛型（更新） <a href="https://docs.oracle.com/javase/tutorial/java/generics/index.html" target="_blank" rel="external">Generics (Updated)</a> 一颗来获取更多关于泛型的信息.) 泛型类（例如泛型接口）在尖括号中表明一个或多个类型参数(<code>&lt;&gt;</code>). 这个接口只包含了一个参数，<code>T</code>,当你定义实际的类型参数时，你有一个参数类型，例如 <code>Predicate&lt;Person&gt;</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参数类型，包含了一个拥有同样参数类型的方法 <code>CheckPerson.boolean test(Person p)</code>. 因此，你可以使用 <code>Predicate&lt;T&gt;</code> 替换 <code>CheckPerson</code>类，如下所示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPersonsWithPredicate</span><span class="params">(</span></span></div><div class="line">    List&lt;Person&gt; roster, Predicate&lt;Person&gt; tester) &#123;</div><div class="line">    <span class="keyword">for</span> (Person p : roster) &#123;</div><div class="line">        <span class="keyword">if</span> (tester.test(p)) &#123;</div><div class="line">            p.printPerson();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果，下面的方法调用就如同你在方法3中 <code>printPersons</code> <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach3" target="_blank" rel="external">Approach 3: Specify Search Criteria Code in a Local Class</a> 一样，可以获取符合服兵役条件的成员:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">printPersonsWithPredicate(</div><div class="line">    roster,</div><div class="line">    p -&gt; p.getGender() == Person.Sex.MALE</div><div class="line">        &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">        &amp;&amp; p.getAge() &lt;= <span class="number">25</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>这里并不是唯一可以使用lambda表达式的地方。下面的方案推荐了其他使用lambda表达式的方法.</p>
<h3 id="方案7-在你的整个应用中使用lambda表达式Approach-7-Use-Lambda-Expressions-Throughout-Your-Application"><a href="#方案7-在你的整个应用中使用lambda表达式Approach-7-Use-Lambda-Expressions-Throughout-Your-Application" class="headerlink" title="方案7:在你的整个应用中使用lambda表达式Approach 7: Use Lambda Expressions Throughout Your Application"></a><a href="">方案7:在你的整个应用中使用lambda表达式Approach 7: Use Lambda Expressions Throughout Your Application</a></h3><p>重新考虑方法 <code>printPersonsWithPredicate</code> ，看看你可以在哪里使用lambda表达式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPersonsWithPredicate</span><span class="params">(</span></span></div><div class="line">    List&lt;Person&gt; roster, Predicate&lt;Person&gt; tester) &#123;</div><div class="line">    <span class="keyword">for</span> (Person p : roster) &#123;</div><div class="line">        <span class="keyword">if</span> (tester.test(p)) &#123;</div><div class="line">            p.printPerson();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个犯法检查了<code>List</code>参数<code>roster</code>中每一个<code>Person</code>实例是否符合具体的标准<code>Predicate</code>参数<code>tester</code>。如果Person实例确实满足<code>tester</code>的条件，<code>Person</code>实例就调用<code>printPerson</code>方法.</p>
<p>取代了调用<code>printPerson</code>方法，你可以对满足搜索条件的成员制定不同的操作。你同样可以通过lambda表达式来实现操作。假如你希望有一个类似printPerson方法的lambda表达式，获取一个Person参数并返回void。记住，使用lambda表达式，你需要实现一个功能接口。本例中，你需要实现一个接受Person参数并且返回为void的接口。<code>Consumer&lt;T&gt;</code>接口，包含了<code>void accept(T t)</code>方法，刚好符合这一特征.下面的代码使用你个<code>Consumer&lt;Person&gt;</code>的实例的<code>accept</code>方法调用，替换了<code>p.printPerson()</code>方法的调用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processPersons</span><span class="params">(</span></span></div><div class="line">    List&lt;Person&gt; roster,</div><div class="line">    Predicate&lt;Person&gt; tester,</div><div class="line">    Consumer&lt;Person&gt; block) &#123;</div><div class="line">        <span class="keyword">for</span> (Person p : roster) &#123;</div><div class="line">            <span class="keyword">if</span> (tester.test(p)) &#123;</div><div class="line">                block.accept(p);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，如下的方法调用同样实现了方案3中的功能，lambda表达式使用的代码如下所示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">processPersons(</div><div class="line">     roster,</div><div class="line">     p -&gt; p.getGender() == Person.Sex.MALE</div><div class="line">         &amp;&amp; p.getAge() &gt;= 18</div><div class="line">         &amp;&amp; p.getAge() &lt;= 25,</div><div class="line">     p -&gt; p.printPerson()</div><div class="line">);</div></pre></td></tr></table></figure>
<p>如果你想要对成员的信息做更多的操作而不只是打印出来。假设你需要验证成员的简介并且获取他们的联系信息。在本例中，你需要一个方能接口把汗了一个返回值的抽象方法。 <code>Function&lt;T,R&gt;</code>接口包含一个方法 <code>R apply(T t)</code>.下面的代码通过参数<code>mapper</code>，获取了数据并通过<code>block</code>参数进行的具体的操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processPersonsWithFunction</span><span class="params">(</span></span></div><div class="line">    List&lt;Person&gt; roster,</div><div class="line">    Predicate&lt;Person&gt; tester,</div><div class="line">    Function&lt;Person, String&gt; mapper,</div><div class="line">    Consumer&lt;String&gt; block) &#123;</div><div class="line">    <span class="keyword">for</span> (Person p : roster) &#123;</div><div class="line">        <span class="keyword">if</span> (tester.test(p)) &#123;</div><div class="line">            String data = mapper.apply(p);</div><div class="line">            block.accept(data);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面的方法取得了过滤后的成员的邮箱地址并且打印出了他们:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">processPersonsWithFunction(</div><div class="line">    roster,</div><div class="line">    p -&gt; p.getGender() == Person.Sex.MALE</div><div class="line">        &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">        &amp;&amp; p.getAge() &lt;= <span class="number">25</span>,</div><div class="line">    p -&gt; p.getEmailAddress(),</div><div class="line">    email -&gt; System.out.println(email)</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="方案8：使用泛型提高扩展性Approach-8-Use-Generics-More-Extensively"><a href="#方案8：使用泛型提高扩展性Approach-8-Use-Generics-More-Extensively" class="headerlink" title="方案8：使用泛型提高扩展性Approach 8: Use Generics More Extensively"></a><a href="">方案8：使用泛型提高扩展性Approach 8: Use Generics More Extensively</a></h3><p>重新考虑方法 <code>processPersonsWithFunction</code>. 如下代码是一个泛型的版本，可以接受任何类型元素集合作为参数:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;X, Y&gt; <span class="function"><span class="keyword">void</span> <span class="title">processElements</span><span class="params">(</span></span></div><div class="line">    Iterable&lt;X&gt; source,</div><div class="line">    Predicate&lt;X&gt; tester,</div><div class="line">    Function &lt;X, Y&gt; mapper,</div><div class="line">    Consumer&lt;Y&gt; block) &#123;</div><div class="line">    <span class="keyword">for</span> (X p : source) &#123;</div><div class="line">        <span class="keyword">if</span> (tester.test(p)) &#123;</div><div class="line">            Y data = mapper.apply(p);</div><div class="line">            block.accept(data);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要打印符合条件的成员的e-mail地址，调用<code>processElements</code>方法的代码如下所示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">processElements(</div><div class="line">    roster,</div><div class="line">    p -&gt; p.getGender() == Person.Sex.MALE</div><div class="line">        &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">        &amp;&amp; p.getAge() &lt;= <span class="number">25</span>,</div><div class="line">    p -&gt; p.getEmailAddress(),</div><div class="line">    email -&gt; System.out.println(email)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>方法调用执行了一下的操作:</p>
<ol>
<li>获取对象集合 <code>source</code>. 本例中，获取了<code>Person</code>对象的集合<code>roster</code> .<code>roster</code>集合是一个<code>List</code>同样是个 <code>Iterable</code>可迭代的对象.</li>
<li>过滤对象中匹配 <code>Predicate</code> 对象 <code>tester</code>条件的 成员.  <code>Predicate</code>对象在本例中满足了服兵役条件的成员。</li>
<li>通过 <code>Function</code> 对象 <code>mapper</code>映射每一个成员.本例中获取了每个成员的e-mail地址.</li>
<li>通过 <code>Consumer</code> 对象 <code>block</code>方法对映射后的结果做具体的操做，本例中将应设计过也就是e-mail地址打印了出来.</li>
</ol>
<p>你同样可以使用聚合操作（连贯操作）来替代以上的操作步骤。.</p>
<h3 id="方案9：使用接受Labmda表达式为参数的集合操作Approach-9-Use-Aggregate-Operations-That-Accept-Lambda-Expressions-as-Parameters"><a href="#方案9：使用接受Labmda表达式为参数的集合操作Approach-9-Use-Aggregate-Operations-That-Accept-Lambda-Expressions-as-Parameters" class="headerlink" title="方案9：使用接受Labmda表达式为参数的集合操作Approach 9: Use Aggregate Operations That Accept Lambda Expressions as Parameters"></a><a href="">方案9：使用接受Labmda表达式为参数的集合操作Approach 9: Use Aggregate Operations That Accept Lambda Expressions as Parameters</a></h3><p>下面的例子使用连贯操作打印出了符合条件的承欢的e-mail地址:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">roster</div><div class="line">    .stream()</div><div class="line">    .filter(</div><div class="line">        p -&gt; p.getGender() == Person.Sex.MALE</div><div class="line">            &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">            &amp;&amp; p.getAge() &lt;= <span class="number">25</span>)</div><div class="line">    .map(p -&gt; p.getEmailAddress())</div><div class="line">    .forEach(email -&gt; System.out.println(email));</div></pre></td></tr></table></figure>
<p>如下表格列出了processElements功能中各个步骤以及对应的连贯操作方法:</p>
<table>
<thead>
<tr>
<th><code>processElements</code> Action（方法步骤）</th>
<th>Aggregate Operation(集合操作)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Obtain a source of objects获取资源，集合对象</td>
<td><code>Stream&lt;E&gt; **stream**()</code></td>
</tr>
<tr>
<td>Filter objects that match a <code>Predicate</code> object过滤对象</td>
<td><code>Stream&lt;T&gt; **filter**(Predicate&lt;? super T&gt; predicate)</code></td>
</tr>
<tr>
<td>Map objects to another value as specified by a <code>Function</code> object将集合中对象映射为其他的值</td>
<td><code>&lt;R&gt; Stream&lt;R&gt; **map**(Function&lt;? super T,? extends R&gt; mapper)</code></td>
</tr>
<tr>
<td>Perform an action as specified by a <code>Consumer</code> object通过<code>Consumer</code>对象执行具体的操作</td>
<td><code>void **forEach**(Consumer&lt;? super T&gt; action)</code></td>
</tr>
</tbody>
</table>
<p>操作 <code>filter</code>, <code>map</code>, 以及 <code>forEach</code> 是 <em>aggregate operations</em>聚合操作. 局和操作将元素作为一个流来处理，而不是直接从集合中（也就是为什么要首先调用<code>stream</code>方法的原因）.<em>stream</em>流是一个元素集合的序列。区别与集合的是，它并不是存储元素的数据结构，流负责从集合中取出资源，通过一个管道。管道pipeline是一系列的流式操作，在本例中的<code>filter-map-forEach</code>。另外，局和操作通常接受lambda表达式作为参数，是你可以自定义操作的行为。</p>
<p>获取更多关于聚合操作的信息，你可以参考 <a href="https://docs.oracle.com/javase/tutorial/collections/streams/index.html" target="_blank" rel="external">Aggregate Operations</a> 一课.</p>
<h2 id="Lambda表达式在GUI应用的使用Lambda-Expressions-in-GUI-Applications"><a href="#Lambda表达式在GUI应用的使用Lambda-Expressions-in-GUI-Applications" class="headerlink" title="Lambda表达式在GUI应用的使用Lambda Expressions in GUI Applications"></a><a href="">Lambda表达式在GUI应用的使用Lambda Expressions in GUI Applications</a></h2><p>处理GUI应用的事件，例如按键事件，鼠标事件，以及滚动事件。通常你都会创建事件处理器，一般都是通过实现特定的接口。一般来说，事件处理器接口是功能接口；他们通常只有一个方法。</p>
<p>在JAVAFX例子中 <a href="https://docs.oracle.com/javase/8/javafx/get-started-tutorial/hello_world.htm" target="_blank" rel="external"><code>HelloWorld.java</code></a> (前一章节中 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html" target="_blank" rel="external">Anonymous Classes</a>), 中提到的你可以将如下所示的匿名类代码替换为Lambda表达式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">btn.setOnAction(<span class="keyword">new</span> EventHandler&lt;ActionEvent&gt;() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ActionEvent event)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>btn.setOnAction</code>方法调用定义当你鼠标选择了<code>btn</code>对象代表的按钮式要放生的事情。这个方法要求一个<code>EventHandler&lt;ActionEvent&gt;</code>类型的对象作为参数。<code>EventHandler&lt;ActionEvent&gt;</code> 接口只包含了一个方法<code>void handle&lt;T event&gt;</code> 。这个接口是一个功能接口，因此你可以使用如下的<code>Lambda</code>来替换他:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.setOnAction(</div><div class="line">  event -&gt; System.out.println(<span class="string">"Hello World!"</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="Lambda表达式的语法Syntax-of-Lambda-Expressions"><a href="#Lambda表达式的语法Syntax-of-Lambda-Expressions" class="headerlink" title="Lambda表达式的语法Syntax of Lambda Expressions"></a><a href="">Lambda表达式的语法Syntax of Lambda Expressions</a></h2><p>一个Lambda表示由如下几部分构成:</p>
<ul>
<li><p>一个圆括号包围、逗号分隔的参数形式的列表.<code>CheckPerson.test</code>方法包含了一个参数<code>p</code>,代表了<code>Person</code>类的实例。</p>
<p><strong>注意</strong>:你可以省略参数类型。同样当只有一个参数时，你也可以省略圆括号。例如下面的Lambda表达式依然是有效的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p -&gt; p.getGender() == Person.Sex.MALE </div><div class="line">    &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">    &amp;&amp; p.getAge() &lt;= <span class="number">25</span></div></pre></td></tr></table></figure>
</li>
<li><p>箭头符号, <code>-&gt;</code></p>
</li>
<li><p>一个方法体, 包含一个单独的表达式或者语句块:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p.getGender() == Person.Sex.MALE </div><div class="line">    &amp;&amp; p.getAge() &gt;= 18</div><div class="line">    &amp;&amp; p.getAge() &lt;= 25</div></pre></td></tr></table></figure>
<p>如果只有一个表达式，Java运行时会返回表达式的值，同样你可以使用返回语句，如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p -&gt; &#123;</div><div class="line">    return p.getGender() == Person.Sex.MALE</div><div class="line">        &amp;&amp; p.getAge() &gt;= 18</div><div class="line">        &amp;&amp; p.getAge() &lt;= 25;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回语句不是一个表达式；在lambda表达式中如果你使用的语句块则必须用<code>{}</code>来闭合，但是你只调用了没有返回值的方法时时可以省略<code>{}</code>,如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">email -&gt; System.out.println(email)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意lambda表达式的定义看起来像是方法的定义;你可以认为lambda表达式是一个匿名方法——没有命名的方法.</p>
<p>接下来的例子, <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/Calculator.java" target="_blank" rel="external"><code>Calculator</code></a>, 使用了不止一个参数:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">IntegerMath</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;   </div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">operateBinary</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, IntegerMath op)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> op.operation(a, b);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">    </div><div class="line">        Calculator myApp = <span class="keyword">new</span> Calculator();</div><div class="line">        IntegerMath addition = (a, b) -&gt; a + b;</div><div class="line">        IntegerMath subtraction = (a, b) -&gt; a - b;</div><div class="line">        System.out.println(<span class="string">"40 + 2 = "</span> +</div><div class="line">            myApp.operateBinary(<span class="number">40</span>, <span class="number">2</span>, addition));</div><div class="line">        System.out.println(<span class="string">"20 - 10 = "</span> +</div><div class="line">            myApp.operateBinary(<span class="number">20</span>, <span class="number">10</span>, subtraction));    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法<code>operationBinary</code>实现类两个整形的数学运算。运算有每个实例自身区分实现。本例中定义了加法和减法两种运算，代码输出结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">40 + 2 = 42</div><div class="line">20 - 10 = 10</div></pre></td></tr></table></figure>
<h2 id="访问局部变量Accessing-Local-Variables-of-the-Enclosing-Scope"><a href="#访问局部变量Accessing-Local-Variables-of-the-Enclosing-Scope" class="headerlink" title="访问局部变量Accessing Local Variables of the Enclosing Scope"></a><a href="">访问局部变量Accessing Local Variables of the Enclosing Scope</a></h2><p>就像局部类和匿名类一样，lambda表达式可以获取变量 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#accessing-members-of-an-enclosing-class" target="_blank" rel="external">capture variables</a>; 他们同局部类和匿名类具有相同的访问权限，lambda表达式么有任何的遮蔽问题（参考 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#shadowing" target="_blank" rel="external">Shadowing</a> 获取更多信息).Lambda表达式是此法范围的。意思是他不从父类继承命名也不引入新的命名空间。定义Lambda表达式只解释为它是在闭合的环境内，下面的例子 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/LambdaScopeTest.java" target="_blank" rel="external"><code>LambdaScopeTest</code></a>, 进行了演示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.function.Consumer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaScopeTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FirstLevel</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">methodInFirstLevel</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">            </div><div class="line">            <span class="comment">// The following statement causes the compiler to generate</span></div><div class="line">            <span class="comment">// the error "local variables referenced from a lambda expression</span></div><div class="line">            <span class="comment">// must be final or effectively final" in statement A:</span></div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="comment">// x = 99;</span></div><div class="line">            </div><div class="line">            Consumer&lt;Integer&gt; myConsumer = (y) -&gt; </div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"x = "</span> + x); <span class="comment">// Statement A</span></div><div class="line">                System.out.println(<span class="string">"y = "</span> + y);</div><div class="line">                System.out.println(<span class="string">"this.x = "</span> + <span class="keyword">this</span>.x);</div><div class="line">                System.out.println(<span class="string">"LambdaScopeTest.this.x = "</span> +</div><div class="line">                    LambdaScopeTest.<span class="keyword">this</span>.x);</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            myConsumer.accept(x);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        LambdaScopeTest st = <span class="keyword">new</span> LambdaScopeTest();</div><div class="line">        LambdaScopeTest.FirstLevel fl = st.new FirstLevel();</div><div class="line">        fl.methodInFirstLevel(<span class="number">23</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述例子输出如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">23</span></div><div class="line">y = <span class="number">23</span></div><div class="line"><span class="keyword">this</span>.x = <span class="number">1</span></div><div class="line">LambdaScopeTest.<span class="keyword">this</span>.x = <span class="number">0</span></div></pre></td></tr></table></figure>
<p>如果你在定义lambda表达式时将y替换为x，编译器将会产生错误:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Consumer&lt;Integer&gt; myConsumer = (x) -&gt; &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译器产生错误”变量x已经在方法<code>methodInFirstLevel(int)</code>中声明”因为lambda表达式并不引入新的命名空间，因此，你可以直接访问闭合范围内的成员变量，方法，以及局部变量。例如，lambda比到时直接访问方法<code>methodInFirstLevel</code>的参数<code>x</code>.要方位闭合类中的变量，则需要使用关键字<code>this</code>。本例中，<code>this.x</code>指向成员变量<code>FirstLevel.x</code>.</p>
<p>然而，就像局部类和匿名类一样，你个lambda表达式只能访问闭合块中定义为final或者final作用的变量或者参数，假设你在代码中增加一行:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">methodInFirstLevel</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    x = <span class="number">99</span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应为代码片段中，变量FirstLevel.x 不再是有效的最终变量.将导致编译器差生类似”lambda表达式必须引用final或者等同final的变量”:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"x = "</span> + x);</div></pre></td></tr></table></figure>
<h2 id="目标类型Target-Typing"><a href="#目标类型Target-Typing" class="headerlink" title="目标类型Target Typing"></a><a href="">目标类型Target Typing</a></h2><p>怎么确定lambda表达式的类型呢？回想一下筛选成员是所用的lambda表达式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p -&gt; p.getGender() == Person.Sex.MALE</div><div class="line">    &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">    &amp;&amp; p.getAge() &lt;= <span class="number">25</span></div></pre></td></tr></table></figure>
<p>这个lambda表达式在以下两个方法中用到:</p>
<ul>
<li><code>public static void printPersons(List&lt;Person&gt; roster, CheckPerson tester)</code> in <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach3" target="_blank" rel="external">Approach 3: Specify Search Criteria Code in a Local Class</a></li>
<li><code>public void printPersonsWithPredicate(List&lt;Person&gt; roster, Predicate&lt;Person&gt; tester)</code> in <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach6" target="_blank" rel="external">Approach 6: Use Standard Functional Interfaces with Lambda Expressions</a></li>
</ul>
<p>当Java运行时调用方法<code>printPersons</code>是，他期望的数据类型是<code>CheckPerson</code>,因此lambda是就是这种类型，但是当java运行时调用方法<code>printPersonWithPredicate</code>时，他期望的类型是<code>Predicate&lt;Person&gt;</code>,因此lambda表达式就是这种类型。这种方法期望的数据类型叫做目标类型 <em>target type</em>.为了确认lambda表达式的类型，java编译器根据其出现的上下文或者情景中的目标类型来决定。下面列出了java编译器可以确定目标类型的情形:</p>
<ul>
<li>变量声明Variable declarations</li>
<li>赋值Assignments</li>
<li>返回语句Return statements</li>
<li>数组初始化Array initializers</li>
<li>方法或者狗高企参数Method or constructor arguments</li>
<li>Lambda表达式体Lambda expression bodies</li>
<li>表达式<code>?:</code>情形Conditional expressions, <code>?:</code></li>
<li>类型转换表达式Cast expressions</li>
</ul>
<h3 id="目标类型和方法参数Target-Types-and-Method-Arguments"><a href="#目标类型和方法参数Target-Types-and-Method-Arguments" class="headerlink" title="目标类型和方法参数Target Types and Method Arguments"></a><a href="">目标类型和方法参数Target Types and Method Arguments</a></h3><p>作为方法参数，java编译器根据另外两个语言特性确认目标累心：重载以及类型参数引用。</p>
<p>考虑下面的两个功能接口 ( <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html" target="_blank" rel="external"><code>java.lang.Runnable</code></a> 以及 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html" target="_blank" rel="external"><code>java.util.concurrent.Callable</code></a>):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法 <code>Runnable.run</code> 不返回值 ，而 <code>Callable&lt;V&gt;.call</code> 返回.</p>
<p>假设你重载了方法<code>invoke</code>如下所示 (参考 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html" target="_blank" rel="external">Defining Methods</a> 获取更多重载的信息):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">    r.run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;T&gt; <span class="function">T <span class="title">invoke</span><span class="params">(Callable&lt;T&gt; c)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> c.call();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而方法的调用如下?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = invoke(() -&gt; <span class="string">"done"</span>);</div></pre></td></tr></table></figure>
<p>方法调用 <code>invoke(Callable&lt;T&gt;)</code> 会被调用因为他有一个返回值;而方法<code>invoke(Runnable)</code>不会因为他没有返回值，所以lambda表达式的<code>() -&gt; &quot;done&quot;</code> 的类型是 <code>Callable&lt;T&gt;</code>.</p>
<h2 id="序列化Serialization"><a href="#序列化Serialization" class="headerlink" title="序列化Serialization"></a><a href="">序列化Serialization</a></h2><p>如果你个lambda表达式的目标类型以及获取的参数是可以序列化的，那么你可以序列化 <a href="https://docs.oracle.com/javase/tutorial/jndi/objects/serial.html" target="_blank" rel="external">serialize</a> 一个lambda表达式。不过，就像内部类 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#serialization" target="_blank" rel="external">inner classes</a>一样，强烈不建议序列化.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Lambda-表达式-Lambda-Expressions&quot;&gt;&lt;a href=&quot;#Lambda-表达式-Lambda-Expressions&quot; class=&quot;headerlink&quot; title=&quot;Lambda 表达式 Lambda Expressions&quot;&gt;&lt;/a&gt;Lambda 表达式 Lambda Expressions&lt;/h1&gt;&lt;p&gt;使用匿名类的一个问题在于，如果你要实现的匿名类非常的简单，例如只包含一个方法的借口，那么匿名列的语法看起来就不够简洁和轻便。这种情况下，你通常会尝试将某个功能作为参数传递给一其他方法，例如当点击按钮的时候会采取什么措施。Lambda表达式可以提供这样的功能，将功能作为方法的参数，或者代码作为数据。&lt;/p&gt;
&lt;p&gt;上一节中， &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anonymous Classes&lt;/a&gt;, 向你展示了实现一个基本的类而不需要命名，譬如只有一个方法的类，不过匿名类看起来有点复杂和笨重。Lambda表达式可以使你更加紧凑的表达一个单方法类的实例。&lt;/p&gt;
&lt;p&gt;本节将包含以下的内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#use-case&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lambda表达式的经典应用Ideal Use Case for Lambda Expressions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#approach1&quot;&gt;方法1：创建搜索某一特点的成员的方法Approach 1: Create Methods That Search for Members That Match One Characteristic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#approach2&quot;&gt;方法2：创建更加通用的搜索方法Approach 2: Create More Generalized Search Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#approach3&quot;&gt;方法3：用局部类实现特定搜索规则相关的的代码Approach 3: Specify Search Criteria Code in a Local Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#approach4&quot;&gt;方法4：用匿名类实现特定搜索规则相关的代码Approach 4: Specify Search Criteria Code in an Anonymous Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#approach5&quot;&gt;方法5：用Lambda表达式实现特定搜索规则的代码Approach 5: Specify Search Criteria Code with a Lambda Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#approach6&quot;&gt;方法6：通过标准的功能接口使用lambda表达式Approach 6: Use Standard Functional Interfaces with Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#approach7&quot;&gt;方法7：在你的应用中使用Lambda表达式Approach 7: Use Lambda Expressions Throughout Your Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#approach8&quot;&gt;方法8：使用反应提高可扩展性Approach 8: Use Generics More Extensively&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#approach9&quot;&gt;方法9：使用已Lambda表达式作为参数的聚合操作Approach 9: Use Aggregate Operations That Accept Lambda Expressions as Parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#lambda-expressions-in-gui-applications&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在GUI应用中使用Lambda表达式Lambda Expressions in GUI Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#syntax&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lambda表达式语法Syntax of Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#accessing-local-variables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;访问闭合区间的局部变量Accessing Local Variables of the Enclosing Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#target-typing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;目标类型Target Typing&lt;/a&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#target-types-and-method-arguments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;目标类型以及方法参数Target Types and Method Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#serialization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;序列化Serialization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="Lambda表达式" scheme="http://yoursite.com/tags/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-匿名类</title>
    <link href="http://yoursite.com/2017/12/04/java-tutorial-learning_class&amp;object_anonymous_class/"/>
    <id>http://yoursite.com/2017/12/04/java-tutorial-learning_class&amp;object_anonymous_class/</id>
    <published>2017-12-04T06:51:59.000Z</published>
    <updated>2017-12-04T03:03:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="匿名类Anonymous-Classes"><a href="#匿名类Anonymous-Classes" class="headerlink" title="匿名类Anonymous Classes"></a>匿名类Anonymous Classes</h1><h1 id="Anonymous-Classes"><a href="#Anonymous-Classes" class="headerlink" title="Anonymous Classes"></a>Anonymous Classes</h1><p>匿名类可以是你的代码更加简。你可以同时声明和实例化一个匿名类。匿名类与局不累很想，只不过没有名字。如果你只想使用一个局部类一次，就可以是用匿名类。</p>
<p>本节包含了一下主题:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html#declaring-anonymous-classes" target="_blank" rel="external">声明匿名类</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html#syntax-of-anonymous-classes" target="_blank" rel="external">匿名类的语法</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html#accessing" target="_blank" rel="external">访问闭合范围内的局部变量，以及声明和访问匿名类的成员</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html#examples-of-anonymous-classes" target="_blank" rel="external">匿名类的实例</a></li>
</ul>
<h2 id="声明匿名类"><a href="#声明匿名类" class="headerlink" title="声明匿名类"></a><a href="">声明匿名类</a></h2><p>局不类是声明，而匿名类是表达式，意思是你在另外一个表达式中定义这个类。下面的例子,<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/HelloWorldAnonymousClasses.java" target="_blank" rel="external"><code>HelloWorldAnonymousClasses</code></a>, 在局部变量 <code>frenchGreeting</code> 以及<code>spanishGreeting</code>的初始化过程中使用了匿名类,而 而局部变量 <code>englishGreeting</code>的声明则使用的局部类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAnonymousClasses</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span></span>;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">EnglishGreeting</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">            String name = <span class="string">"world"</span>;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</div><div class="line">                greetSomeone(<span class="string">"world"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span> </span>&#123;</div><div class="line">                name = someone;</div><div class="line">                System.out.println(<span class="string">"Hello "</span> + name);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      </div><div class="line">        HelloWorld englishGreeting = <span class="keyword">new</span> EnglishGreeting();</div><div class="line">        </div><div class="line">        HelloWorld frenchGreeting = <span class="keyword">new</span> HelloWorld() &#123;</div><div class="line">            String name = <span class="string">"tout le monde"</span>;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</div><div class="line">                greetSomeone(<span class="string">"tout le monde"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span> </span>&#123;</div><div class="line">                name = someone;</div><div class="line">                System.out.println(<span class="string">"Salut "</span> + name);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        HelloWorld spanishGreeting = <span class="keyword">new</span> HelloWorld() &#123;</div><div class="line">            String name = <span class="string">"mundo"</span>;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</div><div class="line">                greetSomeone(<span class="string">"mundo"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span> </span>&#123;</div><div class="line">                name = someone;</div><div class="line">                System.out.println(<span class="string">"Hola, "</span> + name);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        englishGreeting.greet();</div><div class="line">        frenchGreeting.greetSomeone(<span class="string">"Fred"</span>);</div><div class="line">        spanishGreeting.greet();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        HelloWorldAnonymousClasses myApp =</div><div class="line">            <span class="keyword">new</span> HelloWorldAnonymousClasses();</div><div class="line">        myApp.sayHello();</div><div class="line">    &#125;            </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="匿名类的语法Syntax-of-Anonymous-Classes"><a href="#匿名类的语法Syntax-of-Anonymous-Classes" class="headerlink" title="匿名类的语法Syntax of Anonymous Classes"></a><a href="">匿名类的语法Syntax of Anonymous Classes</a></h2><p>就像之前提到的一样，一个匿名类是一个表达式。匿名类表达式的语法类似调用一个构造器，不过在后边多了定义类的代码块。</p>
<p>参考一下 <code>frenchGreeting</code> 对象的实例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HelloWorld frenchGreeting = <span class="keyword">new</span> HelloWorld() &#123;</div><div class="line">    String name = <span class="string">"tout le monde"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</div><div class="line">        greetSomeone(<span class="string">"tout le monde"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span> </span>&#123;</div><div class="line">        name = someone;</div><div class="line">        System.out.println(<span class="string">"Salut "</span> + name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>匿名类表达式由一下几部分组成:</p>
<ul>
<li><code>new</code> 操作符</li>
<li>一个用来实现的接口或者用来继承的类的名称。本例中，匿名类为接口<code>HelloWorld</code> 的实现。</li>
<li>包含构造器参数的圆括号，类似普通的类创建实例表达式。<strong>注意：</strong> 当你实现一个接口时，没有构造器，所以你使用一个空的圆括号。</li>
<li>一个类体，包括了类的定义。需要注意的事，在类体中可以允许方法声明，但是不允许有语句。</li>
</ul>
<p>因为匿名类的定义是一个表达式，他必须是语句的一部分。在本例中，匿名类表达式是实例化<code>frenchGreeting</code>对象语句的一部分。（这也解释了为什么需要在闭合的大括号后面需要一个分号）</p>
<h2 id="访问闭合氛围内的局部变量，以及声明和访问匿名类的成员"><a href="#访问闭合氛围内的局部变量，以及声明和访问匿名类的成员" class="headerlink" title="访问闭合氛围内的局部变量，以及声明和访问匿名类的成员"></a><a href="">访问闭合氛围内的局部变量，以及声明和访问匿名类的成员</a></h2><p>就像局不类一样，匿名类可以 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#accessing-members-of-an-enclosing-class" target="_blank" rel="external">捕获变量capture variables</a>;他们对于闭合范围内的局部变量具有相同的访问权限:</p>
<ul>
<li>匿名类可以访问他的闭合类的成员。</li>
<li>匿名类不能访问他所属闭合范围内定义不是<code>final</code>或者等效于与<code>final</code>的局部变量。</li>
<li>与嵌套类一样，在匿名类中声明某一类型的变量会遮蔽它所属闭合范围内的其它名字相同的变量。参考 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#shadowing" target="_blank" rel="external">遮蔽Shadowing</a>以获取更多信息。</li>
</ul>
<p>匿名类与局不累一样对它自己的成员访问有一些限制:</p>
<ul>
<li>你不能在匿名类中定义静态的初始化器或者是成员接口.</li>
<li>匿名类中可以是用静态成员来定义常量。</li>
</ul>
<p>注意你可以在匿名类中定义以下内容:</p>
<ul>
<li>字段/属性Fields</li>
<li>扩展方法（尽管他们没有实现任何父类的方法）</li>
<li>实例初始化器</li>
<li>局不类</li>
</ul>
<p>不过你不能再匿名类中定义构造器.</p>
<h2 id="匿名类的实例Examples-of-Anonymous-Classes"><a href="#匿名类的实例Examples-of-Anonymous-Classes" class="headerlink" title="匿名类的实例Examples of Anonymous Classes"></a><a href="">匿名类的实例Examples of Anonymous Classes</a></h2><p>匿名类经常在图形界面的应用中使用。</p>
<p>参考下列JavaFX 列子 <a href="https://docs.oracle.com/javase/8/javafx/get-started-tutorial/hello_world.htm" target="_blank" rel="external"><code>HelloWorld.java</code></a> (摘自 <a href="https://docs.oracle.com/javase/8/javafx/get-started-tutorial/hello_world.htm" target="_blank" rel="external">Hello World, JavaFX Style</a> 中 <a href="https://docs.oracle.com/javase/8/javafx/get-started-tutorial/javafx_get_started.htm" target="_blank" rel="external">Getting Started with JavaFX</a>). 这个例子创建了一个报刊了 <strong>Say ‘Hello World’</strong>按钮的框架 :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> javafx.event.EventHandler;</div><div class="line"><span class="keyword">import</span> javafx.scene.Scene;</div><div class="line"><span class="keyword">import</span> javafx.scene.control.Button;</div><div class="line"><span class="keyword">import</span> javafx.scene.layout.StackPane;</div><div class="line"><span class="keyword">import</span> javafx.stage.Stage;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        launch(args);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage primaryStage)</span> </span>&#123;</div><div class="line">        primaryStage.setTitle(<span class="string">"Hello World!"</span>);</div><div class="line">        Button btn = <span class="keyword">new</span> Button();</div><div class="line">        btn.setText(<span class="string">"Say 'Hello World'"</span>);</div><div class="line">        btn.setOnAction(<span class="keyword">new</span> EventHandler&lt;ActionEvent&gt;() &#123;</div><div class="line"> </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ActionEvent event)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        StackPane root = <span class="keyword">new</span> StackPane();</div><div class="line">        root.getChildren().add(btn);</div><div class="line">        primaryStage.setScene(<span class="keyword">new</span> Scene(root, <span class="number">300</span>, <span class="number">250</span>));</div><div class="line">        primaryStage.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本例中I，方法调用<code>btn.setOnAction</code> 定义了当你选择<strong>Say ‘Hello World’</strong>按钮的时候回发生什么.这个方法要求一个 <code>EventHandler&lt;ActionEvent&gt;</code>类型的对象.  <code>EventHandler&lt;ActionEvent&gt;</code>接口仅包含一个方法，handle。这里没有重新定义一个类来实现这个方法，而是直接使用了匿名类表达式。注意这个表达式是传递给<code>btn.setOnAction</code> 方法的参数.</p>
<p>因为 <code>EventHandler&lt;ActionEvent&gt;</code> 接口仅仅包含一个方法,你同样可以使用lambda表达式来代替匿名类表达式. 参考<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda Expressions</a> 章节来获取更多信息.</p>
<p>匿名类是用来实现包含有两个或多个方法接口的理想方法。下面的例子JavaFX example 来自Customization of UI Controls](<a href="https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/custom.htm" target="_blank" rel="external">https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/custom.htm</a>). 代码中创建了一个只接受数字值文本域. 它使用匿名类重新定义了<code>TextField</code>类，复写了继承自 <code>TextInputControl</code> 类的 <code>replaceText</code> 和 <code>replaceSelection</code> 方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javafx.application.Application;</div><div class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> javafx.event.EventHandler;</div><div class="line"><span class="keyword">import</span> javafx.geometry.Insets;</div><div class="line"><span class="keyword">import</span> javafx.scene.Group;</div><div class="line"><span class="keyword">import</span> javafx.scene.Scene;</div><div class="line"><span class="keyword">import</span> javafx.scene.control.*;</div><div class="line"><span class="keyword">import</span> javafx.scene.layout.GridPane;</div><div class="line"><span class="keyword">import</span> javafx.scene.layout.HBox;</div><div class="line"><span class="keyword">import</span> javafx.stage.Stage;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTextFieldSample</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Label label = <span class="keyword">new</span> Label();</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage stage)</span> </span>&#123;</div><div class="line">        Group root = <span class="keyword">new</span> Group();</div><div class="line">        Scene scene = <span class="keyword">new</span> Scene(root, <span class="number">300</span>, <span class="number">150</span>);</div><div class="line">        stage.setScene(scene);</div><div class="line">        stage.setTitle(<span class="string">"Text Field Sample"</span>);</div><div class="line"> </div><div class="line">        GridPane grid = <span class="keyword">new</span> GridPane();</div><div class="line">        grid.setPadding(<span class="keyword">new</span> Insets(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>));</div><div class="line">        grid.setVgap(<span class="number">5</span>);</div><div class="line">        grid.setHgap(<span class="number">5</span>);</div><div class="line"> </div><div class="line">        scene.setRoot(grid);</div><div class="line">        <span class="keyword">final</span> Label dollar = <span class="keyword">new</span> Label(<span class="string">"$"</span>);</div><div class="line">        GridPane.setConstraints(dollar, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        grid.getChildren().add(dollar);</div><div class="line">        </div><div class="line">        <span class="keyword">final</span> TextField sum = <span class="keyword">new</span> TextField() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceText</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String text)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!text.matches(<span class="string">"[a-z, A-Z]"</span>)) &#123;</div><div class="line">                    <span class="keyword">super</span>.replaceText(start, end, text);                     </div><div class="line">                &#125;</div><div class="line">                label.setText(<span class="string">"Enter a numeric value"</span>);</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceSelection</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!text.matches(<span class="string">"[a-z, A-Z]"</span>)) &#123;</div><div class="line">                    <span class="keyword">super</span>.replaceSelection(text);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"> </div><div class="line">        sum.setPromptText(<span class="string">"Enter the total"</span>);</div><div class="line">        sum.setPrefColumnCount(<span class="number">10</span>);</div><div class="line">        GridPane.setConstraints(sum, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        grid.getChildren().add(sum);</div><div class="line">        </div><div class="line">        Button submit = <span class="keyword">new</span> Button(<span class="string">"Submit"</span>);</div><div class="line">        GridPane.setConstraints(submit, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">        grid.getChildren().add(submit);</div><div class="line">        </div><div class="line">        submit.setOnAction(<span class="keyword">new</span> EventHandler&lt;ActionEvent&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">                label.setText(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        GridPane.setConstraints(label, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">        GridPane.setColumnSpan(label, <span class="number">3</span>);</div><div class="line">        grid.getChildren().add(label);</div><div class="line">        </div><div class="line">        scene.setRoot(grid);</div><div class="line">        stage.show();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        launch(args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;匿名类Anonymous-Classes&quot;&gt;&lt;a href=&quot;#匿名类Anonymous-Classes&quot; class=&quot;headerlink&quot; title=&quot;匿名类Anonymous Classes&quot;&gt;&lt;/a&gt;匿名类Anonymous Classes&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="Anonymous Classe" scheme="http://yoursite.com/tags/Anonymous-Classe/"/>
    
      <category term="匿名类" scheme="http://yoursite.com/tags/%E5%8C%BF%E5%90%8D%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-局部类</title>
    <link href="http://yoursite.com/2017/10/24/java-tutorial-learning_the_lang_basic_local_class/"/>
    <id>http://yoursite.com/2017/10/24/java-tutorial-learning_the_lang_basic_local_class/</id>
    <published>2017-10-24T06:51:59.000Z</published>
    <updated>2017-10-26T01:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="局部类Local-Classes"><a href="#局部类Local-Classes" class="headerlink" title="局部类Local Classes"></a>局部类Local Classes</h1><p>局部类是指定义在一个代码块<em>block</em>中的类，一组包含与<code>{}</code>之内的一组语句。</p>
<p>本节包含了以下内容:</p>
<ul>
<li>定义一个局部类<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#declaring-local-classes" target="_blank" rel="external">Declaring Local Classes</a></li>
<li>访问所属类的成员Accessing Members of an Enclosing Class<ul>
<li>遮蔽与局部类<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#shadowing-and-local-classes" target="_blank" rel="external">Shadowing and Local Classes</a></li>
</ul>
</li>
<li>局部类与内部类相似<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#local-classes-are-similar-to-inner-classes" target="_blank" rel="external">Local Classes Are Similar To Inner Classes</a></li>
</ul>
<h2 id="定义局部类Declaring-Local-Classes"><a href="#定义局部类Declaring-Local-Classes" class="headerlink" title="定义局部类Declaring Local Classes"></a>定义局部类<a href="">Declaring Local Classes</a></h2><p>你可以在任何代码块中定义局部类(参考 <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html" target="_blank" rel="external">Expressions, Statements, and Blocks</a> 表达式，语句代码块获取更多的信息).例如:你可以在一个方法体内，一个<code>for</code>循环内或者一个<code>if</code>语句中定义局部类。</p>
<p>下面的例子, <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/LocalClassExample.java" target="_blank" rel="external"><code>LocalClassExample</code></a>,验证了两个电话号码。他在方法<code>validatePhoneNumber</code>方法内定义了一个局部类<code>PhoneNumber</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalClassExample</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="keyword">static</span> String regularExpression = <span class="string">"[^0-9]"</span>;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validatePhoneNumber</span><span class="params">(</span></span></div><div class="line">        String phoneNumber1, String phoneNumber2) &#123;</div><div class="line">      </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> numberLength = <span class="number">10</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// Valid in JDK 8 and later:</span></div><div class="line">       </div><div class="line">        <span class="comment">// int numberLength = 10;</span></div><div class="line">       </div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>&#123;</div><div class="line">            </div><div class="line">            String formattedPhoneNumber = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            PhoneNumber(String phoneNumber)&#123;</div><div class="line">                <span class="comment">// numberLength = 7;</span></div><div class="line">                String currentNumber = phoneNumber.replaceAll(</div><div class="line">                  regularExpression, <span class="string">""</span>);</div><div class="line">                <span class="keyword">if</span> (currentNumber.length() == numberLength)</div><div class="line">                    formattedPhoneNumber = currentNumber;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    formattedPhoneNumber = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> formattedPhoneNumber;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// Valid in JDK 8 and later:</span></div><div class="line"></div><div class="line"><span class="comment">//            public void printOriginalNumbers() &#123;</span></div><div class="line"><span class="comment">//                System.out.println("Original numbers are " + phoneNumber1 +</span></div><div class="line"><span class="comment">//                    " and " + phoneNumber2);</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        PhoneNumber myNumber1 = <span class="keyword">new</span> PhoneNumber(phoneNumber1);</div><div class="line">        PhoneNumber myNumber2 = <span class="keyword">new</span> PhoneNumber(phoneNumber2);</div><div class="line">        </div><div class="line">        <span class="comment">// Valid in JDK 8 and later:</span></div><div class="line"></div><div class="line"><span class="comment">//        myNumber1.printOriginalNumbers();</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (myNumber1.getNumber() == <span class="keyword">null</span>) </div><div class="line">            System.out.println(<span class="string">"First number is invalid"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            System.out.println(<span class="string">"First number is "</span> + myNumber1.getNumber());</div><div class="line">        <span class="keyword">if</span> (myNumber2.getNumber() == <span class="keyword">null</span>)</div><div class="line">            System.out.println(<span class="string">"Second number is invalid"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            System.out.println(<span class="string">"Second number is "</span> + myNumber2.getNumber());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        validatePhoneNumber(<span class="string">"123-456-7890"</span>, <span class="string">"456-7890"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子通过两部验证一个电话号码，首先将电话号码中所有除了0-9的数字一处，然后检查电话号码是否包含了10个数字（北美的电话号码长度）.例子的输出如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">First number is 1234567890</div><div class="line">Second number is invalid</div></pre></td></tr></table></figure>
<h2 id="局部类访问你所处类的成员Accessing-Members-of-an-Enclosing-Class"><a href="#局部类访问你所处类的成员Accessing-Members-of-an-Enclosing-Class" class="headerlink" title="局部类访问你所处类的成员Accessing Members of an Enclosing Class"></a>局部类访问你所处类的成员<a href="">Accessing Members of an Enclosing Class</a></h2><p>局部类有访问其所处类成员的权限。前面的例子中，<code>PhoneNumber</code>构造器访问了成员 <code>LocalClassExample.regularExpression</code>. 另外，局部类有访问局部变量的权限。不过，局部类只能访问被声明未<code>final</code>的局部变量。当一个局部类访问一个局部变量或者时所处代码块的参数时，它捕获<em>captures</em>了那个变量或者参数。例如，<code>PhoneNumber</code>构造器可以访问局部变量<code>numberLength</code>因为他是定义未<code>final</code>的；<code>numberLength</code>是一个<em>捕获变量</em>captured <em>variable</em>.</p>
<p>然而你，Java SE 8开始，可以访问所属代码块中定义未final或者有效最终<em>effectively final</em>的变量以及参数.例如，假设变量<code>numberLength</code>没有被声明为<code>final</code>，并且在<code>PhoneNumber</code>的构造其中加了如下的代码，将其变量值改变为数字7：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PhoneNumber(String phoneNumber) &#123;</div><div class="line">    numberLength = <span class="number">7</span>;</div><div class="line">    String currentNumber = phoneNumber.replaceAll(</div><div class="line">        regularExpression, <span class="string">""</span>);</div><div class="line">    <span class="keyword">if</span> (currentNumber.length() == numberLength)</div><div class="line">        formattedPhoneNumber = currentNumber;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        formattedPhoneNumber = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为这个赋值语句，变量<code>numberLength</code>就是不再时一个有效最终值。这样做的结果就是，当<code>PhoneNumber</code>类尝试引用局部变量 <code>numberLength</code>时， Java编译器生成一个错误信息，类似“local variable referenced from an inner class must be final or effectively final”（内部类中引用的局部变量必须是一个最终或或者一个等效最终值）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (currentNumber.length() == numberLength)</div></pre></td></tr></table></figure>
<p>从Java SE 8开始，你再一个方法中定义局部变量时，他可以访问方法的参数。例如，你可以再局部类<code>PhoneNumber</code>中定义如下方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printOriginalNumbers</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Original numbers are "</span> + phoneNumber1 +</div><div class="line">        <span class="string">" and "</span> + phoneNumber2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法<code>printOriginalNumbers</code>方位了方法 <code>validatePhoneNumber</code>的两个参数 <code>phoneNumber1</code> 以及<code>phoneNumber2</code> 。</p>
<h3 id="局部类与遮蔽Shadowing-and-Local-Classes"><a href="#局部类与遮蔽Shadowing-and-Local-Classes" class="headerlink" title="局部类与遮蔽Shadowing and Local Classes"></a><a href="">局部类与遮蔽Shadowing and Local Classes</a></h3><p>再局部类中声明一个类型（譬如变量）遮蔽其所在闭合范围内拥有相同名字的类型。参考遮蔽 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#shadowing" target="_blank" rel="external">Shadowing</a> 获取更多信息。</p>
<h2 id="局部类与内部类相似Local-Classes-Are-Similar-To-Inner-Classes"><a href="#局部类与内部类相似Local-Classes-Are-Similar-To-Inner-Classes" class="headerlink" title="局部类与内部类相似Local Classes Are Similar To Inner Classes"></a><a href="">局部类与内部类相似Local Classes Are Similar To Inner Classes</a></h2><p>局部类与内部类相似，因为它们都不定义任何的静态static成员。局部类如果再静态方法内，譬如 <code>PhoneNumber</code>类,定义再静态方法 <code>validatePhoneNumber</code>中,就只能引用闭合范围内的静态成员。如果你不讲成员变量 <code>regularExpression</code> 定义为静态static,那么Java编译器就会生成一个错误， “non-static variable <code>regularExpression</code> cannot be referenced from a static context.”（非静态变量<code>regularExpression</code>不能再一个静态的上下文中引用)</p>
<p>局部类是非静态的，因为它可以方法所属闭合代码块中的实例变量。因此它们几乎不能包含任何类型的静态声明。</p>
<p>你不能再一个代码块中定义接口，因为接口再本质上静态的。例如，下面的代码引用是不能编译的因为接口<code>HelloThere</code>被定义再方法<code>greetInEnglish</code>方法体中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetInEnglish</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">HelloThere</span> </span>&#123;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EnglishHelloThere</span> <span class="keyword">implements</span> <span class="title">HelloThere</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"Hello "</span> + name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    HelloThere myGreeting = <span class="keyword">new</span> EnglishHelloThere();</div><div class="line">    myGreeting.greet();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你不能再一个局部类中定义静态的初始化器或者成员。以下的代码不能通过编译，因为方法 <code>EnglishGoodbye.sayGoodbye</code> 被声明为 <code>static</code>. 当遇到这种方法定义时编译器会生成一个错误类似 “modifier ‘static’ is only allowed in constant variable declaration”（限定符static只能用再常量的声明上） :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayGoodbyeInEnglish</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EnglishGoodbye</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayGoodbye</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"Bye bye"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    EnglishGoodbye.sayGoodbye();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>局部类可以有静态成员除非时常量. (常量 <em>constant variable</em>是一个定义为final的基本数据类型或者String字符串类型的变量初始化为一个编译时的常量表达式。编译时常量表达式同时时一个字符串或者时编译时可以计算的运算表达式。参考理解成员变量<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html" target="_blank" rel="external">Understanding Class Members</a> 获取更多信息.) 以下代码摘绿可以通过编译，因为静态成员 <code>EnglishGoodbye.farewell</code> 是一个常量:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayGoodbyeInEnglish</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EnglishGoodbye</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String farewell = <span class="string">"Bye bye"</span>;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayGoodbye</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(farewell);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    EnglishGoodbye myEnglishGoodbye = <span class="keyword">new</span> EnglishGoodbye();</div><div class="line">    myEnglishGoodbye.sayGoodbye();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;局部类Local-Classes&quot;&gt;&lt;a href=&quot;#局部类Local-Classes&quot; class=&quot;headerlink&quot; title=&quot;局部类Local Classes&quot;&gt;&lt;/a&gt;局部类Local Classes&lt;/h1&gt;&lt;p&gt;局部类是指定义在一个代码块&lt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="局部类" scheme="http://yoursite.com/tags/%E5%B1%80%E9%83%A8%E7%B1%BB/"/>
    
      <category term="Local Class" scheme="http://yoursite.com/tags/Local-Class/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-内部类</title>
    <link href="http://yoursite.com/2017/10/24/java-tutorial-learning_the_lang_basic_inner_class/"/>
    <id>http://yoursite.com/2017/10/24/java-tutorial-learning_the_lang_basic_inner_class/</id>
    <published>2017-10-24T06:00:59.000Z</published>
    <updated>2017-10-26T01:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>讨论内部类的使用之前，首先来观察一个数组。接下来的例子中，你创建一个数组，使用Integer指填充这个数组，然后只升序输出这个数组中下标为偶数的值。</p>
<p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/DataStructure.java" target="_blank" rel="external"><code>DataStructure.java</code></a> 例子有以下几个部分组成：</p>
<ul>
<li><code>DataStructure</code> 外部类，包含了一个创建<code>DataStructure</code>实例的构造函数，实例包含一个填充了连续的整数数组（0，1，2，3…）以及一个打印出数组偶数下标元素的值的方法。</li>
<li><code>EvenIterator</code>内部类，实现了<code>DataStructureIterator</code>接口，并继承了 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html" target="_blank" rel="external"><code>Iterator</code></a><code>&lt;</code> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html" target="_blank" rel="external"><code>Integer</code></a><code>&gt;</code> 迭代器接口。迭代器是用来一步步的迭代一个数据结构并且通常有一个测试是否到达最后一个元素的方法，获取当前的元素并将指针移向下一个元素。</li>
<li>一个<code>main</code>方法，实例化一个<code>DataStructure</code>对象 <code>ds</code>,调用<code>ds</code>对象的<code>printEven</code>方法来输出<code>arrayOfInts</code>数组中具有偶数下边的元素值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataStructure</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// Create an array</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> SIZE = <span class="number">15</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arrayOfInts = <span class="keyword">new</span> <span class="keyword">int</span>[SIZE];</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataStructure</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// fill the array with ascending integer values</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</div><div class="line">            arrayOfInts[i] = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEven</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// Print out values of even indices of the array</span></div><div class="line">        DataStructureIterator iterator = <span class="keyword">this</span>.new EvenIterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            System.out.print(iterator.next() + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">DataStructureIterator</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123; &#125; </div><div class="line"></div><div class="line">    <span class="comment">// Inner class implements the DataStructureIterator interface,</span></div><div class="line">    <span class="comment">// which extends the Iterator&lt;Integer&gt; interface</span></div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EvenIterator</span> <span class="keyword">implements</span> <span class="title">DataStructureIterator</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// Start stepping through the array from the beginning</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> nextIndex = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            </div><div class="line">            <span class="comment">// Check if the current element is the last in the array</span></div><div class="line">            <span class="keyword">return</span> (nextIndex &lt;= SIZE - <span class="number">1</span>);</div><div class="line">        &#125;        </div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            </div><div class="line">            <span class="comment">// Record a value of an even index of the array</span></div><div class="line">            Integer retValue = Integer.valueOf(arrayOfInts[nextIndex]);</div><div class="line">            </div><div class="line">            <span class="comment">// Get the next even element</span></div><div class="line">            nextIndex += <span class="number">2</span>;</div><div class="line">            <span class="keyword">return</span> retValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String s[])</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// Fill the array with integer values and print out only</span></div><div class="line">        <span class="comment">// values of even indices</span></div><div class="line">        DataStructure ds = <span class="keyword">new</span> DataStructure();</div><div class="line">        ds.printEven();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 2 4 6 8 10 12 14</div></pre></td></tr></table></figure>
<p>注意<code>EvenIterator</code>类直接引用<code>DataStructure</code>对象的实例变量<code>arrayOfInts</code>.</p>
<p>你可以使用内部类来实现类似以上例子中的辅助类。处理用户界面事件时，你必须直到如何使用内部类，因为事件处理机制使通过内部类来扩展其用法。</p>
<h2 id="局部类与匿名内部类"><a href="#局部类与匿名内部类" class="headerlink" title="局部类与匿名内部类"></a>局部类与匿名内部类</h2><p>有中附加的内部类。你可以在一个方法的内部定义一个类，这样的类叫做局部类 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html" target="_blank" rel="external">local classes</a>. 。你同样可以在方法内定义一个未命名内部类，这样的类讲过匿名内部类 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html" target="_blank" rel="external">anonymous classes</a>.。</p>
<h2 id="限定修饰符"><a href="#限定修饰符" class="headerlink" title="限定修饰符"></a>限定修饰符</h2><p>你对内部类使用同外部类其他成员一样的限定修饰符。例如，你可以使用特定的<code>private</code>,<code>public</code>,以及<code>protected</code>来显示对内部类的访问，同其他类的成员一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;内部类&lt;/h1&gt;&lt;p&gt;讨论内部类的使用之前，首先来观察一个数组。接下来的例子中，你创建一个数组，使用Integer指填充这个数组，然后只升序输出这个数组中
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="inner class" scheme="http://yoursite.com/tags/inner-class/"/>
    
      <category term="内部类" scheme="http://yoursite.com/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-嵌套类</title>
    <link href="http://yoursite.com/2017/10/23/java-tutorial-learning_the_lang_basic_nested_class/"/>
    <id>http://yoursite.com/2017/10/23/java-tutorial-learning_the_lang_basic_nested_class/</id>
    <published>2017-10-23T09:00:59.000Z</published>
    <updated>2017-10-26T01:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h1><p>java编程语言允许你在一个类的内部定义类。这样的类叫做<em>嵌套类**nested class</em>,示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NestedClass</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>术语Terminology</strong>: 嵌套类分为两类，静态和非静态.声明为<code>static</code>的嵌套类叫做 <em>static nested classes</em>静态嵌套类。非静态嵌套类叫做<em>inner classes</em>内部类。</p>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticNestedClass</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>嵌套类是其所在类的成员。非静态嵌套类（内部类）具有访问所在类的其他成员的访问权限，即使是私有的成员。静态内部类没有访问其所在类的其他成员的权限。作为<code>OuterClass</code>的成员，一个嵌套类可以被声明为<code>private</code>,<code>public</code>,<code>protected</code>或者包级私有（package private 默认）。（重申以下外部类只能 被定义为<code>public</code> 或者 包级私有）。</p>
<h2 id="为什么使用嵌套类"><a href="#为什么使用嵌套类" class="headerlink" title="为什么使用嵌套类?"></a>为什么使用嵌套类?</h2><p>驱使使用嵌套类的原因包括以下几个：</p>
<ul>
<li><strong>它是为只在一个地方使用的类的逻辑分类的一种方法It is a way of logically grouping classes that are only used in one place</strong>: 如果一个类支只对另外一个类有用，那么把它嵌入那个类中是两者保持在一起是符合逻辑的。嵌套进这样的<em>辅助类</em> 是他们的包结构更加的合理化。</li>
<li><strong>增加封装性It increases encapsulation</strong>:  考虑两个顶级的类，A和B，如果B需要访问A中原本声明为<code>private</code>的成员。通过将B吟唱在A类内，A的成员可以被定义为<code>private</code>私有，并且B可以访问它们，B本身也可以对于外部世界隐藏。</li>
<li><strong>是代码更加易读和易于管理It can lead to more readable and maintainable code</strong>: 将小类嵌套与顶级类中是代码更接近它使用的地方。</li>
</ul>
<h2 id="静态嵌套类Static-Nested-Classes"><a href="#静态嵌套类Static-Nested-Classes" class="headerlink" title="静态嵌套类Static Nested Classes"></a>静态嵌套类Static Nested Classes</h2><p>与类方法和类变量一样，静态嵌套类是与其外部类相关联的。并且像静态类方法一样，一个静态嵌套类不能直接引用类中定义的实例变量和实例方法：只能通过一个对象的引用来使用。</p>
<hr>
<p><strong>注意</strong>:  静态嵌套类与其外部类或者其他类的实例成员交互 与它的顶级类一样。实际上，一个静态嵌套类与与顶积累表现一样，只不过可以方便的嵌入其他定义类，构建包更加便利。</p>
<p>static nested class interacts with the instance members of its outer class (and other classes) just like any other top-level class. In effect, a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.</p>
<hr>
<p>静态嵌套类通过其所有类的类名来访问例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OuterClass.StaticNestedClass</div></pre></td></tr></table></figure>
<p>如果需要创建一个静态嵌套类的对象，使用如下的语法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OuterClass.StaticNestedClass nestedObject =</div><div class="line">     <span class="keyword">new</span> OuterClass.StaticNestedClass();</div></pre></td></tr></table></figure>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>与实例方法和实例变量一样，一个内部类是与其所有类的实例相关联的，并且可以直接访问其实例方法和字段/域。 同样，因为内部类是域实例向关联的，所以它本身不能定义任何的静态成员。</p>
<p>内部类的实例对象存在与外部类实例的内部，观察下面的类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个内部类 <code>InnerClass</code> 的实例只能存在于一个<code>OuterClass</code>类的实例内部，并且可以直接访问该实例的方法和字段/域。</p>
<p>实例化一个内部类，你必须现实里话外部类。然后，通过外部类的对象创建内部对象，语法如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OuterClass.InnerClass innerObject = outerObject.new InnerClass();</div></pre></td></tr></table></figure>
<p>内部类还有两种特殊情况：<a href="">局部类</a> 和 <a href="">匿名内部类</a>.: <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html" target="_blank" rel="external">local classes</a> and <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html" target="_blank" rel="external">anonymous classes</a>.</p>
<h2 id="遮蔽Shadowing"><a href="#遮蔽Shadowing" class="headerlink" title="遮蔽Shadowing"></a>遮蔽<a href="">Shadowing</a></h2><p>如果在一个特定的范围内（例如在一个内部类或者是方法顶以内）定义一个类型（例如成员变量或者是参数名称）与闭合区域内（例如外部类的闭合区域内）的另外一个声明有相同的名字，那么这个声明就会遮蔽闭合区域内的声明。你不能指通过名字引用被遮蔽的声明。下面是一个例子， <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/ShadowTest.java" target="_blank" rel="external"><code>ShadowTest</code></a>, 演示了这个现象:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShadowTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FirstLevel</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">methodInFirstLevel</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"x = "</span> + x);</div><div class="line">            System.out.println(<span class="string">"this.x = "</span> + <span class="keyword">this</span>.x);</div><div class="line">            System.out.println(<span class="string">"ShadowTest.this.x = "</span> + ShadowTest.<span class="keyword">this</span>.x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        ShadowTest st = <span class="keyword">new</span> ShadowTest();</div><div class="line">        ShadowTest.FirstLevel fl = st.new FirstLevel();</div><div class="line">        fl.methodInFirstLevel(<span class="number">23</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下为这个例子的输出:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">23</span></div><div class="line"><span class="keyword">this</span>.x = <span class="number">1</span></div><div class="line">ShadowTest.<span class="keyword">this</span>.x = <span class="number">0</span></div></pre></td></tr></table></figure>
<p>这个例子定义了三个变量名字都为<code>x</code>: 类<code>ShadowTest</code>的成员变量，内部类<code>FirstLevel</code>的成员变量，以及方法<code>methodInFirstLevel</code>的参数。方法<code>methodInFirstLevel</code>的参数<code>x</code>遮蔽了内部类<code>FirstLevel</code>的变量x。因此，当你在方法<code>methodInFirstLevel</code>中使用<code>x</code>时，引用的时方法的参数。为了引用内部类<code>FirstLevel</code>的成员变量，使用<code>this</code>挂件子来代表笔和空间:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"this.x = "</span> + <span class="keyword">this</span>.x);</div></pre></td></tr></table></figure>
<p>为了引用更大的闭合范围内的成员变量，需要使用它所属于的类名。例如，下面的语句，在<code>methodInFirstLevel</code>方法中引用了<code>ShadowTest</code>类的成员变量:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"ShadowTest.this.x = "</span> + ShadowTest.<span class="keyword">this</span>.x);</div></pre></td></tr></table></figure>
<h2 id="序列化Serialization"><a href="#序列化Serialization" class="headerlink" title="序列化Serialization"></a>序列化<a href="">Serialization</a></h2><p>内部类的序列化，包括局部类和匿名内部类，强力不建议。当Java编译器编译确定的结构，例如内部类，会创建合成构造 <em>synthetic constructs</em>; 包括类，方法，字段，以及其他的结构，这些结构在源码中并没有对应的相应的构造。合成构造能使使Java编译器在不更换JVM的情况下实现新的Java语言特性。然而合成构造可能因为不同固定Java编译器实现而有区别，意味着<code>.class</code>文件可能因为不同的实现也有所不同。因此，如果你用不同的JRE实现序列化和反序列化一个内部类的时候可能会出现各种各样的复杂问题。</p>
<p>参考 <a href="https://docs.oracle.com/javase/tutorial/reflect/member/methodparameterreflection.html#implcit_and_synthetic" target="_blank" rel="external">Implicit and Synthetic Parameters</a>  隐式合成参数， <a href="https://docs.oracle.com/javase/tutorial/reflect/member/methodparameterreflection.html" target="_blank" rel="external">Obtaining Names of Method Parameters</a> 获取方法参数名 章节，来获取内部类编译时生成合成构造的更多信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;嵌套类&quot;&gt;&lt;a href=&quot;#嵌套类&quot; class=&quot;headerlink&quot; title=&quot;嵌套类&quot;&gt;&lt;/a&gt;嵌套类&lt;/h1&gt;&lt;p&gt;java编程语言允许你在一个类的内部定义类。这样的类叫做&lt;em&gt;嵌套类**nested class&lt;/em&gt;,示例如下：&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="嵌套类" scheme="http://yoursite.com/tags/%E5%B5%8C%E5%A5%97%E7%B1%BB/"/>
    
      <category term="nested class" scheme="http://yoursite.com/tags/nested-class/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-类-问题与练习</title>
    <link href="http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_q&amp;e1/"/>
    <id>http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_q&amp;e1/</id>
    <published>2017-10-20T07:39:59.000Z</published>
    <updated>2018-03-21T08:51:38.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类：问题与练习"><a href="#类：问题与练习" class="headerlink" title="类：问题与练习"></a>类：问题与练习</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p>观察下面的类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentifyMyParts</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">7</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> y = <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p><strong>问题</strong>: 哪一个是类变量?</p>
</li>
<li><p><strong>问题</strong>:哪一个是实例变量?</p>
</li>
<li><p><strong>问题</strong>: 以下代码的输出内容是什么:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">IdentifyMyParts a = new IdentifyMyParts(); </div><div class="line">IdentifyMyParts b = new IdentifyMyParts(); </div><div class="line">a.y = 5; </div><div class="line">b.y = 6; </div><div class="line">a.x = 1; </div><div class="line">b.x = 2; </div><div class="line">System.out.println(&quot;a.y = &quot; + a.y); </div><div class="line">System.out.println(&quot;b.y = &quot; + b.y); </div><div class="line">System.out.println(&quot;a.x = &quot; + a.x); </div><div class="line">System.out.println(&quot;b.x = &quot; + b.x); </div><div class="line">System.out.println(&quot;IdentifyMyParts.x = &quot; + IdentifyMyParts.x);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
</li>
</ol>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li><strong>练习</strong>: 写一个类，类的每一个实例代表了一副牌中的一张。没一张牌有两个属性：点数与花色。保留你的解决方案，在 <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/enum-questions.html" target="_blank" rel="external">Enum Types</a> 枚举类一节中会要求你重写这个类.</li>
<li><strong>练习</strong>: 写一个类，类的每一个实例代表<strong>一整副</strong>扑克。同样保留这个类。</li>
<li><strong>练习</strong>：写一个小程序来测试你的单长牌与扑克类。可以简单的创建一副扑克并展示它其中的每一张牌。</li>
</ol>
<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><a id="more"></a>
<h2 id="问题答案"><a href="#问题答案" class="headerlink" title="问题答案"></a>问题答案</h2><ol>
<li><p>观察下面的类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentifyMyParts</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">7</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> y = <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p><strong>问题</strong>: 哪一个是类变量?</p>
<p><strong>答案</strong>: x</p>
</li>
<li><p><strong>问题</strong>:哪一个是实例变量?</p>
<p><strong>答案</strong>: y</p>
</li>
<li><p><strong>问题</strong>: 以下代码的输出内容是什么:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">IdentifyMyParts a = new IdentifyMyParts(); </div><div class="line">IdentifyMyParts b = new IdentifyMyParts(); </div><div class="line">a.y = 5; </div><div class="line">b.y = 6; </div><div class="line">a.x = 1; </div><div class="line">b.x = 2; </div><div class="line">System.out.println(&quot;a.y = &quot; + a.y); </div><div class="line">System.out.println(&quot;b.y = &quot; + b.y); </div><div class="line">System.out.println(&quot;a.x = &quot; + a.x); </div><div class="line">System.out.println(&quot;b.x = &quot; + b.x); </div><div class="line">System.out.println(&quot;IdentifyMyParts.x = &quot; + IdentifyMyParts.x);</div></pre></td></tr></table></figure>
<p><strong>答案</strong>: 输出如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a.y = 5 </div><div class="line">b.y = 6 </div><div class="line">a.x = 2 </div><div class="line">b.x = 2</div><div class="line">IdentifyMyParts.x = 2</div></pre></td></tr></table></figure>
<p>因为 <code>x</code>的在类<code>IdentifyMyParts</code>中的定义为 <code>public static int</code> 。每一个指向<code>x</code>的引用都有最后赋给<code>x</code>的值，因为<code>x</code>是一个静态变量（或者说类变量），为所有类的实例所共享。也就是说只有一个<code>x</code>: 当<code>x</code>的值在任何实例中发生改变就会影响所有 <code>IdentifyMyParts</code>类的实例的<code>x</code>值.</p>
<p>在理解类与实例的成员一节中包含了这些内容 <a href="">Understanding Instance and Class Members</a>.</p>
</li>
</ol>
</li>
</ol>
<h2 id="练习答案"><a href="#练习答案" class="headerlink" title="练习答案"></a>练习答案</h2><ol>
<li><p><strong>练习</strong>: 写一个类，类的每一个实例代表了一副牌中的一张。没一张牌有两个属性：点数与花色。保留你的解决方案，在 <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/enum-questions.html" target="_blank" rel="external">Enum Types</a> 枚举类一节中会要求你重写这个类.</p>
<p><strong>答案</strong>: <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/examples/Card.java" target="_blank" rel="external"><code>Card.java</code></a><img src="http://docs.oracle.com/javase/tutorial/images/sourceIcon.gif" alt="(in a .java source file)">.</p>
</li>
<li><p><strong>练习</strong>: 写一个类，类的每一个实例代表<strong>一整副</strong>扑克。同样保留这个类。</p>
<p><strong>答案</strong>:  <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/examples/Deck.java" target="_blank" rel="external"><code>Deck.java</code></a><img src="http://docs.oracle.com/javase/tutorial/images/sourceIcon.gif" alt="(in a .java source file)">.</p>
</li>
<li><p><strong>练习</strong>：写一个小程序来测试你的单长牌与扑克类。可以简单的创建一副扑克并展示它其中的每一张牌。</p>
<p><strong>答案</strong>:  <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/examples/DisplayDeck.java" target="_blank" rel="external"><code>DisplayDeck.java</code></a><img src="http://docs.oracle.com/javase/tutorial/images/sourceIcon.gif" alt="(in a .java source file)">.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类：问题与练习&quot;&gt;&lt;a href=&quot;#类：问题与练习&quot; class=&quot;headerlink&quot; title=&quot;类：问题与练习&quot;&gt;&lt;/a&gt;类：问题与练习&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;观察下面的类:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IdentifyMyParts&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;: 哪一个是类变量?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;:哪一个是实例变量?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;: 以下代码的输出内容是什么:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;IdentifyMyParts a = new IdentifyMyParts(); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IdentifyMyParts b = new IdentifyMyParts(); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.y = 5; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b.y = 6; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.x = 1; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b.x = 2; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&amp;quot;a.y = &amp;quot; + a.y); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&amp;quot;b.y = &amp;quot; + b.y); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&amp;quot;a.x = &amp;quot; + a.x); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&amp;quot;b.x = &amp;quot; + b.x); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&amp;quot;IdentifyMyParts.x = &amp;quot; + IdentifyMyParts.x);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;练习&lt;/strong&gt;: 写一个类，类的每一个实例代表了一副牌中的一张。没一张牌有两个属性：点数与花色。保留你的解决方案，在 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/enum-questions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Enum Types&lt;/a&gt; 枚举类一节中会要求你重写这个类.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;练习&lt;/strong&gt;: 写一个类，类的每一个实例代表&lt;strong&gt;一整副&lt;/strong&gt;扑克。同样保留这个类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;练习&lt;/strong&gt;：写一个小程序来测试你的单长牌与扑克类。可以简单的创建一副扑克并展示它其中的每一张牌。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h1&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-对象-问题与练习</title>
    <link href="http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_q&amp;e2/"/>
    <id>http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_q&amp;e2/</id>
    <published>2017-10-20T06:53:59.000Z</published>
    <updated>2017-10-26T01:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象-问题与练习"><a href="#对象-问题与练习" class="headerlink" title="对象-问题与练习"></a>对象-问题与练习</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p><strong>问题</strong>: 下面的程序有什么问题?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomethingIsWrong</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Rectangle myRect;</div><div class="line">        myRect.width = <span class="number">40</span>;</div><div class="line">        myRect.height = <span class="number">50</span>;</div><div class="line">        System.out.println(<span class="string">"myRect's area is "</span> + myRect.area());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>问题</strong>:  以下代码创建了一个数组对象和字符串对象。当代码实行完毕后，有多少个指向那些对象的引用?是否两个对象都将会垃圾回收器回收?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">String[] students = <span class="keyword">new</span> String[<span class="number">10</span>];</div><div class="line">String studentName = <span class="string">"Peter Smith"</span>;</div><div class="line">students[<span class="number">0</span>] = studentName;</div><div class="line">studentName = <span class="keyword">null</span>;</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p><strong>问题</strong>: 程序是如何销毁一个它创建的对象的?</p>
</li>
</ol>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li><p><strong>练习</strong>: 修复 <code>SomethingIsWrong</code> 代码在问题1中的错误.</p>
</li>
<li><p><strong>练习</strong>: 已知以下类 <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/NumberHolder.java" target="_blank" rel="external"><code>NumberHolder</code></a>, 些以下代码创建一个该类的实例，初始化它的两个成员变量，然后显示每个成员变量的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> anInt;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> aFloat;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><a id="more"></a>
<h2 id="问题答案"><a href="#问题答案" class="headerlink" title="问题答案"></a>问题答案</h2><ol>
<li><p><strong>问题</strong>: 下面的程序有什么问题?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomethingIsWrong</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Rectangle myRect;</div><div class="line">        myRect.width = <span class="number">40</span>;</div><div class="line">        myRect.height = <span class="number">50</span>;</div><div class="line">        System.out.println(<span class="string">"myRect's area is "</span> + myRect.area());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>答案</strong>: 代码从来没有创建一个 <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/Rectangle.java" target="_blank" rel="external"><code>Rectangle</code></a> 对象. 这个简单的程序，编译器将会产生一个错误。不过更加实际的情况是， <code>myRect</code> 可能在一个地方被实例化为 <code>null</code> ,如果说在构造器中,然后再使用.这种情况下程序可以正常编译，但是会产生一个 <code>NullPointerException</code> 运行时异常.</p>
</li>
<li><p><strong>问题</strong>:  以下代码创建了一个数组对象和字符串对象。当代码实行完毕后，有多少个指向那些对象的引用?是否两个对象都将会垃圾回收器回收?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">String[] students = <span class="keyword">new</span> String[<span class="number">10</span>];</div><div class="line">String studentName = <span class="string">"Peter Smith"</span>;</div><div class="line">students[<span class="number">0</span>] = studentName;</div><div class="line">studentName = <span class="keyword">null</span>;</div><div class="line">...</div></pre></td></tr></table></figure>
<p><strong>答案</strong>: 有一个指向<code>students</code>数组的引用，并且数组里有一个指向字符串 <code>Peter Smith</code>的引用.两个对象都不会被垃圾回收器回收 .数组 <code>students</code>有一个指向<code>studentName</code>的引用所以不会被回收，尽管<code>studentName</code>已经被赋值为<code>null</code>. <code>studentName</code>对象也不会被回收因为<code>students[0]</code>仍然在引用它。.</p>
</li>
<li><p><strong>问题</strong>: 程序是如何销毁一个它创建的对象的?</p>
<p><strong>答案</strong>: 程序并没有显示的销毁一个对象。程序可以设置所有执行一个对象的引用为<code>null</code>,这样这个对象就符合被垃圾会少的条件。但是程序并没有销毁对象。</p>
</li>
</ol>
<h2 id="练习答案"><a href="#练习答案" class="headerlink" title="练习答案"></a>练习答案</h2><ol>
<li><p><strong>练习</strong>: 修复 <code>SomethingIsWrong</code> 代码在问题1中的错误.</p>
<p><strong>Answer</strong>: 参考<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/SomethingIsRight.java" target="_blank" rel="external"><code>SomethingIsRight</code></a>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomethingIsRight</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Rectangle myRect = <span class="keyword">new</span> Rectangle();</div><div class="line">        myRect.width = <span class="number">40</span>;</div><div class="line">        myRect.height = <span class="number">50</span>;</div><div class="line">        System.out.println(<span class="string">"myRect's area is "</span> + myRect.area());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>练习</strong>: 已知以下类 <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/NumberHolder.java" target="_blank" rel="external"><code>NumberHolder</code></a>, 些以下代码创建一个该类的实例，初始化它的两个成员变量，然后显示每个成员变量的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> anInt;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> aFloat;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>答案</strong>: 参考<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/NumberHolderDisplay.java" target="_blank" rel="external"><code>NumberHolderDisplay</code></a>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberHolderDisplay</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	NumberHolder aNumberHolder = <span class="keyword">new</span> NumberHolder();</div><div class="line">	aNumberHolder.anInt = <span class="number">1</span>;</div><div class="line">	aNumberHolder.aFloat = <span class="number">2.3f</span>;</div><div class="line">	System.out.println(aNumberHolder.anInt);</div><div class="line">	System.out.println(aNumberHolder.aFloat);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对象-问题与练习&quot;&gt;&lt;a href=&quot;#对象-问题与练习&quot; class=&quot;headerlink&quot; title=&quot;对象-问题与练习&quot;&gt;&lt;/a&gt;对象-问题与练习&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;: 下面的程序有什么问题?&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomethingIsWrong&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Rectangle myRect;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        myRect.width = &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        myRect.height = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;myRect&#39;s area is &quot;&lt;/span&gt; + myRect.area());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;:  以下代码创建了一个数组对象和字符串对象。当代码实行完毕后，有多少个指向那些对象的引用?是否两个对象都将会垃圾回收器回收?&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String[] students = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String studentName = &lt;span class=&quot;string&quot;&gt;&quot;Peter Smith&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;students[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = studentName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;studentName = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;: 程序是如何销毁一个它创建的对象的?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;练习&lt;/strong&gt;: 修复 &lt;code&gt;SomethingIsWrong&lt;/code&gt; 代码在问题1中的错误.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;练习&lt;/strong&gt;: 已知以下类 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/NumberHolder.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;NumberHolder&lt;/code&gt;&lt;/a&gt;, 些以下代码创建一个该类的实例，初始化它的两个成员变量，然后显示每个成员变量的值。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NumberHolder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; anInt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; aFloat;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h1&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="Object" scheme="http://yoursite.com/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-类和对象总结</title>
    <link href="http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_class_15/"/>
    <id>http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_class_15/</id>
    <published>2017-10-20T06:00:59.000Z</published>
    <updated>2017-10-26T01:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建于使用类和对象的总结"><a href="#创建于使用类和对象的总结" class="headerlink" title="创建于使用类和对象的总结"></a>创建于使用类和对象的总结</h1><p>类的定义 为类命名并将类体包含与<code>{ }</code>之内。类的命名可以加上修饰符。类体内包含了域/字段，方法，以及类的构造器。</p>
<p>类使用字段来包含状态信息，使用方法来表现行为。 构造器使用域类型一样但是没有返回值的方法类初始化一个类的实例。</p>
<p>控制类以及其访问权限的方法一样：通过声明时使用访问修饰符来确定，例如<code>public</code> </p>
<p>通过使用<code>static</code>关键字在成员声明时区分类变量域类方法。在声明时没有使用<code>static</code>关键字的成员默认为实例成员。类变量为所有类的实例所共享的，既可以通过类名引用也可以通过实例来引用。 来的实例获取每一个实例变量的副本，实例变量必须通过实例来引用。</p>
<p>你可以使用<code>new</code>操作符来从一个类创建对象。<code>new</code>操作符返回一个 指向创建的对象的引用。你可以将其赋值给一个变量，也可以直接使用。</p>
<p>实例变量或方法同样可以被类以外的代码访问，不过必须通过合格的名称来引用。一个正确的引用实例变量的代码类似如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objectReference.variableName</div></pre></td></tr></table></figure>
<p>引用实例方法的代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objectReference.methodName(argumentList)</div></pre></td></tr></table></figure>
<p>或者:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objectReference.methodName()</div></pre></td></tr></table></figure>
<p>垃圾回收器自动清理不再被使用的对象。不在被使用的判定条件为程序不在持有该对象的引用。你可以显示的抛弃一个对象的引用，通过将变量的引用设置为指向<code>null</code>;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建于使用类和对象的总结&quot;&gt;&lt;a href=&quot;#创建于使用类和对象的总结&quot; class=&quot;headerlink&quot; title=&quot;创建于使用类和对象的总结&quot;&gt;&lt;/a&gt;创建于使用类和对象的总结&lt;/h1&gt;&lt;p&gt;类的定义 为类命名并将类体包含与&lt;code&gt;{ }&lt;/cod
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="Object" scheme="http://yoursite.com/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-类-初始化字段</title>
    <link href="http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_class_14/"/>
    <id>http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_class_14/</id>
    <published>2017-10-20T04:23:59.000Z</published>
    <updated>2017-10-26T01:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化域"><a href="#初始化域" class="headerlink" title="初始化域"></a>初始化域</h1><p>就像你看到的一样，你通常可以在一个字段/域定义的时候提供一个初始值:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BedAndBreakfast</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// initialize to 10</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> capacity = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="comment">// initialize to false</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> full = <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当初始化的值可用并且初始化可以在一行内完成时这么做都没有问题。不过，这样的初始化形式有一些使用限制因为它过于简单。如果初始化需要一些逻辑（例如，错误处理或者一个<code>for</code>循环来填充一个复合的数组）,简单的赋值就不适合了。实例变量可以在在构造器中实例化，这里也可以使用错误处理和逻辑。为了给类变量的初始化也提供这样的能力，Java编程语言包含了<em>静态代码块</em> <em>static initialization blocks</em>.</p>
<hr>
<p><strong>注意</strong>:  并不是一定要在类定义的开始就声明字段/域，尽管这是最通常的做法。只是要求它们在使用前必须声明和初始化。</p>
<hr>
<h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p><code>静态代码块</code>时在一个普通的<code>{ }</code>包括的代码块前面加上<code>static</code>关键字。下面是一个例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    <span class="comment">// whatever code is needed for initialization goes here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个类可以有多个静态代码块，并且它们可以出现在类体body的任何地方。运行环境确保所有的静态代码块按照它们在源代码中出现的顺序被调用。</p>
<p>静态代码块有个可替换的方法–你可以使用私有静态方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Whatever</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> varType myVar = initializeClassVariable();</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> varType <span class="title">initializeClassVariable</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// initialization code goes here</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用私有静态方法的好处是如果你需要重新初始化变量就可以重用它。</p>
<h2 id="初始化实例成员Initializing-Instance-Members"><a href="#初始化实例成员Initializing-Instance-Members" class="headerlink" title="初始化实例成员Initializing Instance Members"></a>初始化实例成员Initializing Instance Members</h2><p> 通常，你可以经初始化实例成员的代码放进一个构造器，同样还有两个方法可以达到这种目的，初始化代码块，以及final方法;</p>
<p>实例变量初始化代码块域静态代码块类似，不过少了<code>static</code>关键字:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">// whatever code is needed for initialization goes here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Java编译器将初始化代码块复制到每一个构造器，因此使用这种方法的好处是可以在多个构造其中分享同一代码块。</p>
<p> <em>final method</em> final方法 不可以被子类重写。在接口域与继承一颗中我们还会详细讨论。下面是一个使用final方法初始化实例变量的例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Whatever</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> varType myVar = initializeInstanceVariable();</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> varType <span class="title">initializeInstanceVariable</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// initialization code goes here</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>特别是当子类想要重用这个初始化方法的时候使用这种方法。使用final方法是因为在实例实例化的过程中调用非final的方法可能引起很多的问题。（思考）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初始化域&quot;&gt;&lt;a href=&quot;#初始化域&quot; class=&quot;headerlink&quot; title=&quot;初始化域&quot;&gt;&lt;/a&gt;初始化域&lt;/h1&gt;&lt;p&gt;就像你看到的一样，你通常可以在一个字段/域定义的时候提供一个初始值:&lt;/p&gt;
&lt;figure class=&quot;highligh
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="Initializing Fields" scheme="http://yoursite.com/tags/Initializing-Fields/"/>
    
      <category term="初始化" scheme="http://yoursite.com/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-类-类的成员</title>
    <link href="http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_class_13/"/>
    <id>http://yoursite.com/2017/10/20/java-tutorial-learning_class&amp;object_class_13/</id>
    <published>2017-10-20T03:21:59.000Z</published>
    <updated>2017-10-26T01:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解类的成员"><a href="#理解类的成员" class="headerlink" title="理解类的成员"></a>理解类的成员</h1><p>在本节中，我们讨论使用<code>static</code>关键字来创建属于类的字段和方法，而不是示例的成员。</p>
<h2 id="类变量Class-Variables"><a href="#类变量Class-Variables" class="headerlink" title="类变量Class Variables"></a>类变量Class Variables</h2><p>当一定数量的对象按照同样的类模板创建时，它们每一个都拥有不同的<em>实例变量</em> 的副本。在自行车类<code>Bicycle</code> 中，实例变量为 <code>cadence</code>, <code>gear</code>, 和<code>speed</code>. 没一个自行车 <code>Bicycle</code> 对象的这些变量都有着不同的值，存储在不同的内存位置中。</p>
<p>有时候，你想要有对所有对象都相同的变量。这就要使用<code>static</code>修饰符来完成。声明时带有<code>static</code>修饰符的字段/域叫做 <em>静态域</em> 或者 <em>类变量</em>  （<em>static fields</em> or <em>class variables</em>）.</p>
<p>它们是域类相关联的而不是任一个对象。每一个类的实例共享类变量，存储在一个固定的内存位置。任一个对象都可以改变类变量的值，并且类变量也可以在不创建任何类的实例的情况下进行操作。</p>
<p>例如，假设你想创建一定数量的自行 <code>Bicycle</code>对象并且为每一个分配一个序号，第一个对象的开始值为1. 这个ID数字对域每一个对象都都是唯一的因此是一个实例变量。同时，你需要你个字段来跟踪已经创建了多少<code>Bicycle</code>对象，这样你可以直到为下一个对象分配什么ID。这么一个字段并不是域任一个单独的对象关联的，而是对于整个类。这样你就需一个类变量， <code>numberOfBicycles</code>,就像相面的例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> </span>&#123;</div><div class="line">        </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cadence;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gear;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> speed;</div><div class="line">        </div><div class="line">    <span class="comment">// add an instance variable for the object ID</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    </div><div class="line">    <span class="comment">// add a class variable for the</span></div><div class="line">    <span class="comment">// number of Bicycle objects instantiated</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> numberOfBicycles = <span class="number">0</span>;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类变量是通过它自身的类名来引用的，例如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bicycle.numberOfBicycles</div></pre></td></tr></table></figure>
<p>这样就可以清晰的直到它们是类变量.</p>
<hr>
<p>注意: 你同样可以使用一个对象来引用静态域如下 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myBike.numberOfBicycles</div></pre></td></tr></table></figure>
<p>但是并不鼓励这么做，因为这样做并不能清除的表明它们是类变量。</p>
<hr>
<p>你可以使用 <code>Bicycle</code> 构造器来为每一个实例变量<code>id</code>赋值，并增加类变量 <code>numberOfBicycles</code> 的值:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> </span>&#123;</div><div class="line">        </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cadence;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gear;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> speed;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> numberOfBicycles = <span class="number">0</span>;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span><span class="params">(<span class="keyword">int</span> startCadence, <span class="keyword">int</span> startSpeed, <span class="keyword">int</span> startGear)</span></span>&#123;</div><div class="line">        gear = startGear;</div><div class="line">        cadence = startCadence;</div><div class="line">        speed = startSpeed;</div><div class="line"></div><div class="line">        <span class="comment">// increment number of Bicycles</span></div><div class="line">        <span class="comment">// and assign ID number</span></div><div class="line">        id = ++numberOfBicycles;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// new method to return the ID instance variable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="类的方法Class-Methods"><a href="#类的方法Class-Methods" class="headerlink" title="类的方法Class Methods"></a>类的方法Class Methods</h2><p>Java编程语言支持静态变量的同时也支持静态方法。静态方法，在定义时使用<code>static</code>修饰符，应该通过类名类直接调用，而无需创建一个类的实例，例如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClassName.methodName(args)</div></pre></td></tr></table></figure>
<hr>
<p>注意:  你同样可以使用一个对象来引用静态方法如下 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">instanceName.methodName(args)</div></pre></td></tr></table></figure>
<p>但是并不鼓励这么做，因为这样做并不能清除的表明它们是类的方法。</p>
<hr>
<p>静态方法一个常用的地方使用来方位静态域。例如，我们可以为<code>Bicycle</code>类添加一个静态方法来访问 <code>numberOfBicycles</code> 静态域:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumberOfBicycles</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> numberOfBicycles;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并不是所有的静态方法，静态域 与实例变量实例方法的 结合使用都使允许的:</p>
<ul>
<li>实例方法可以直接访问实例变量与实例方法。</li>
<li>实例方法可以直接调用类变量以及类方法。Instance methods can access class variables and class methods directly.</li>
<li>类方法可以直接方法类变量与类方法。Class methods can access class variables and class methods directly.</li>
<li>类方法<strong>不能</strong>直接访问实例变量与实例方法——它们必须通过一个对象来引用。同样，类方法不能使用<code>this</code>关键字，因为这里的<code>this</code>不能指向任何实例。</li>
</ul>
<h2 id="常量Constants"><a href="#常量Constants" class="headerlink" title="常量Constants"></a>常量Constants</h2><p><code>static</code>修饰符，经常与<code>final</code>修饰符结合使用，用来定义常量。<code>final</code>修饰符表明这个字段的值不能改变。</p>
<p>例如，下面的变量声明了一个常量<code>PI</code>，值为pi（圆周率：圆的周长与直径的比值）的近似值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.141592653589793</span>;</div></pre></td></tr></table></figure>
<p>这种方式定义的常量不能重新赋值，如果你尝试这么做的话就会得到一个编译时错误。按照管理，常量的命名单词用大写字母拼写，如果名字包含了多个单词，使用下划线<code>_</code>分割.</p>
<hr>
<p>注意:如果一个基本数据类型或者字符串被定义为常量并且值在编译时已经确知，编译器将所有代码中出现的所有常量名替换为它的值。这叫做 编译时常量 <em>compile-time constant</em>. 如果你使用的常量外部世界值发生改变（例如，立法确认pi的值应该为3.975）,那么你就需要重新编译所以用到这个常量的类来获取当前固定值。</p>
<hr>
<h2 id="自行车Bicycle-类"><a href="#自行车Bicycle-类" class="headerlink" title="自行车Bicycle 类"></a>自行车<code>Bicycle</code> 类</h2><p>经过所有的改变之后 <code>Bicycle</code> 现在如下所示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> </span>&#123;</div><div class="line">        </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cadence;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gear;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> speed;</div><div class="line">        </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> numberOfBicycles = <span class="number">0</span>;</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span><span class="params">(<span class="keyword">int</span> startCadence,</span></span></div><div class="line">                   <span class="keyword">int</span> startSpeed,</div><div class="line">                   <span class="keyword">int</span> startGear) &#123;</div><div class="line">        gear = startGear;</div><div class="line">        cadence = startCadence;</div><div class="line">        speed = startSpeed;</div><div class="line"></div><div class="line">        id = ++numberOfBicycles;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumberOfBicycles</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> numberOfBicycles;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCadence</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cadence;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCadence</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</div><div class="line">        cadence = newValue;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGear</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> gear;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGear</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</div><div class="line">        gear = newValue;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> speed;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyBrake</span><span class="params">(<span class="keyword">int</span> decrement)</span> </span>&#123;</div><div class="line">        speed -= decrement;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speedUp</span><span class="params">(<span class="keyword">int</span> increment)</span> </span>&#123;</div><div class="line">        speed += increment;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;理解类的成员&quot;&gt;&lt;a href=&quot;#理解类的成员&quot; class=&quot;headerlink&quot; title=&quot;理解类的成员&quot;&gt;&lt;/a&gt;理解类的成员&lt;/h1&gt;&lt;p&gt;在本节中，我们讨论使用&lt;code&gt;static&lt;/code&gt;关键字来创建属于类的字段和方法，而不是示例的成员
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="Class Members" scheme="http://yoursite.com/tags/Class-Members/"/>
    
      <category term="类的成员" scheme="http://yoursite.com/tags/%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习指南_学习Java：基础-类-this关键字</title>
    <link href="http://yoursite.com/2017/10/18/java-tutorial-learning_class&amp;object_class_11/"/>
    <id>http://yoursite.com/2017/10/18/java-tutorial-learning_class&amp;object_class_11/</id>
    <published>2017-10-18T05:54:59.000Z</published>
    <updated>2017-10-26T01:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用this关键字"><a href="#使用this关键字" class="headerlink" title="使用this关键字"></a>使用this关键字</h1><p>在一个实例方法或者是构造器中，<code>this</code>关键字指向<em>当前对象**current object</em>—被调用了方法或者构造器的对象。你可以通过<code>this</code>关键字在实例方法或者构造器中引用当前对象的任何成员。</p>
<h2 id="this-与-Field"><a href="#this-与-Field" class="headerlink" title="this 与 Field"></a><code>this</code> 与 Field</h2><p>通常使用<code>this</code>关键字的原因是field被方法或构造器的参数遮蔽.例如,  <code>Point</code>可以这样写</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> y = <span class="number">0</span>;</div><div class="line">        </div><div class="line">    <span class="comment">//constructor</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        x = a;</div><div class="line">        y = b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样也可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> y = <span class="number">0</span>;</div><div class="line">        </div><div class="line">    <span class="comment">//constructor</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造器的每一个参数遮蔽对象的一个filed字段/属性–方法内<strong>x</strong> 是构造器第一参数的一本局部副本.为了引用 <code>Point</code> 的 <strong>x</strong>字段, 构造器必须使用 <code>this.x</code>.</p>
<h2 id="this-与构造器-Constructor"><a href="#this-与构造器-Constructor" class="headerlink" title="this 与构造器 Constructor"></a><code>this</code> 与构造器 Constructor</h2><p>在一个构造器内，你同样可以使用<code>this</code>关键字来调用用一个类中的其他构造器。这样做叫作<em>explicit constructor invocation**显示的构造函数调用</em>.下面是一个 <code>Rectangle</code> 类,与对象一节中实现方法不同.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width, height;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">        <span class="keyword">this</span>.width = width;</div><div class="line">        <span class="keyword">this</span>.height = height;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个类包含一系列的构造器.每一个构造器初始化初始化矩形的一些成员变量.构造器为没有提供初始化参数的成员变量设置一个默认值。例如。无参构造器在坐标(0,0)处创建一个1X1的矩形。这个两个参数的构造其调用了四个参数的构造器，传递里宽高参数并且使用了(0,0)坐标。就像之前一样，编译器决定去调用哪一个构造器，基于参数的数量以及类型。</p>
<p>如果存在这种调用，对其他构造器的调用必须出现在构造器中的第一行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用this关键字&quot;&gt;&lt;a href=&quot;#使用this关键字&quot; class=&quot;headerlink&quot; title=&quot;使用this关键字&quot;&gt;&lt;/a&gt;使用this关键字&lt;/h1&gt;&lt;p&gt;在一个实例方法或者是构造器中，&lt;code&gt;this&lt;/code&gt;关键字指向&lt;em&gt;当
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="class" scheme="http://yoursite.com/tags/class/"/>
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
  </entry>
  
</feed>
